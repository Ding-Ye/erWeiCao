<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Advantech.Adam</name>
    </assembly>
    <members>
        <member name="T:Advantech.Adam.AdamType">
            <summary>
            The ADAM module type
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamType.Adam4000">
            <summary>
            ADAM-4000 module
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamType.Adam5000">
            <summary>
            ADAM-5000 module
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamType.Adam5000Tcp">
            <summary>
            ADAM-5000TCP module
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamType.Adam6000">
            <summary>
            ADAM-6000 module
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam4000Type">
            <summary>
            The ADAM 4000 module type
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000Type.Non">
            <summary>
            Non module
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000Type.Adam4011">
            <summary>
            ADAM-4011
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000Type.Adam4011D">
            <summary>
            ADAM-4011D
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000Type.Adam4012">
            <summary>
            ADAM-4012
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000Type.Adam4013">
            <summary>
            ADAM-4013
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000Type.Adam4015">
            <summary>
            ADAM-4015
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000Type.Adam4015T">
            <summary>
            ADAM-4015T
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000Type.Adam4016">
            <summary>
            ADAM-4016
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000Type.Adam4017">
            <summary>
            ADAM-4017
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000Type.Adam4017P">
            <summary>
            ADAM-4017+
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000Type.Adam4018">
            <summary>
            ADAM-4018
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000Type.Adam4018P">
            <summary>
            ADAM-4018+
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000Type.Adam4018M">
            <summary>
            ADAM-4018M
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000Type.Adam4019">
            <summary>
            ADAM-4019
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000Type.Adam4019P">
            <summary>
            ADAM-4019+
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000Type.Adam4021">
            <summary>
            ADAM-4021
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000Type.Adam4022T">
            <summary>
            ADAM-4022T
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000Type.Adam4024">
            <summary>
            ADAM-4024
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000Type.Adam4050">
            <summary>
            ADAM-4050
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000Type.Adam4051">
            <summary>
            ADAM-4051
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000Type.Adam4052">
            <summary>
            ADAM-4052
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000Type.Adam4053">
            <summary>
            ADAM-4053
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000Type.Adam4055">
            <summary>
            ADAM-4055
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000Type.Adam4056S">
            <summary>
            ADAM-4056S
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000Type.Adam4056SO">
            <summary>
            ADAM-4056SO
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000Type.Adam4060">
            <summary>
            ADAM-4060
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000Type.Adam4068">
            <summary>
            ADAM-4068
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000Type.Adam4069">
            <summary>
            ADAM-4069
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000Type.Adam4080">
            <summary>
            ADAM-4080
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000Type.Adam4080D">
            <summary>
            ADAM-4080D
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam5000Type">
            <summary>
            The ADAM 5000 module type
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5000Type.Non">
            <summary>
            Non module
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5000Type.Adam5000">
            <summary>
            ADAM-5000
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5000Type.Adam5000E">
            <summary>
            ADAM-5000E
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5000Type.Adam5013">
            <summary>
            ADAM-5013
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5000Type.Adam5017">
            <summary>
            ADAM-5017
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5000Type.Adam5017H">
            <summary>
            ADAM-5017H
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5000Type.Adam5017UH">
            <summary>
            ADAM-5017UH
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5000Type.Adam5018">
            <summary>
            ADAM-5018
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5000Type.Adam5018P">
            <summary>
            ADAM-5018+
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5000Type.Adam5024">
            <summary>
            ADAM-5024
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5000Type.Adam5050">
            <summary>
            ADAM-5050
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5000Type.Adam5051">
            <summary>
            ADAM-5051
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5000Type.Adam5052">
            <summary>
            ADAM-5052
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5000Type.Adam5055">
            <summary>
            ADAM-5055
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5000Type.Adam5056">
            <summary>
            ADAM-5056
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5000Type.Adam5060">
            <summary>
            ADAM-5060
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5000Type.Adam5068">
            <summary>
            ADAM-5068
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5000Type.Adam5069">
            <summary>
            ADAM-5069
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5000Type.Adam5080">
            <summary>
            ADAM-5080
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam6000Type">
            <summary>
            The ADAM 6000 module type
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6000Type.Non">
            <summary>
            Non module
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6000Type.Adam6015">
            <summary>
            ADAM-6015
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6000Type.Adam6017">
            <summary>
            ADAM-6017
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6000Type.Adam6018">
            <summary>
            ADAM-6018
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6000Type.Adam6022">
            <summary>
            ADAM-6022
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6000Type.Adam6024">
            <summary>
            ADAM-6024
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6000Type.Adam6050">
            <summary>
            ADAM-6050
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6000Type.Adam6051">
            <summary>
            ADAM-6051
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6000Type.Adam6052">
            <summary>
            ADAM-6052
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6000Type.Adam6055">
            <summary>
            ADAM-6055
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6000Type.Adam6060">
            <summary>
            ADAM-6060
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6000Type.Adam6066">
            <summary>
            ADAM-6066
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6000Type.Adam6050W">
            <summary>
            ADAM-6050W
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6000Type.Adam6051W">
            <summary>
            ADAM-6051W
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6000Type.Adam6060W">
            <summary>
            ADAM-6060W
            </summary>
        </member>
        <member name="T:Advantech.Adam.AdamBase">
            <summary>
            ADAM ASCII base class library for ADAM series.
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamBase.m_com">
            <summary>
            AdamCom reference
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamBase.m_iAddr">
            <summary>
            Module address
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamBase.m_socket">
            <summary>
            AdamSocket reference
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamBase.m_error">
            <summary>
            The last error
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamBase.m_adamType">
            <summary>
            Adam series type
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamBase.m_numberFormatInfo">
            <summary>
            The number format information for ADAM modules
            </summary>
        </member>
        <member name="M:Advantech.Adam.AdamBase.#ctor(Advantech.Adam.AdamCom)">
            <summary>
            The AdamBase constructor
            </summary>
            <param name="i_com">The AdamCom object.</param>
        </member>
        <member name="M:Advantech.Adam.AdamBase.#ctor(Advantech.Adam.AdamSocket)">
            <summary>
            The AdamBase constructor
            </summary>
            <param name="i_socket">The AdamSocket object.</param>
        </member>
        <member name="M:Advantech.Adam.AdamBase.ASCIISendRecv(System.String,System.String@)">
            <summary>
            Send and receive ADAM ASCII command
            </summary>
            <param name="i_szSend">The ASCII command to send.</param>
            <param name="o_szRecv">The ASCII response received.</param>
            <returns>True, if successed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AdamBase.GetProtocolType">
            <summary>
            Get socket protocol type
            </summary>
            <returns>The socket protocol type</returns>
        </member>
        <member name="P:Advantech.Adam.AdamBase.Address">
            <summary>
            The slave address.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamBase.LastError">
            <summary>
            The last error code when function return false.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamBase.AdamSeriesType">
            <summary>
            The Adam series type
            </summary>
        </member>
        <member name="T:Advantech.Adam.AdamCom">
            <summary>
            ADAM serial communication class library for ADAM series.
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamCom._bChkEnable">
            <summary>
            Record the checksum status
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamCom.m_error">
            <summary>
            The last error code
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamCom.m_Config">
            <summary>
            ADAM-4000 ADAM-5000 Configuration object
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamCom.m_DI">
            <summary>
            ADAM-4000 ADAM-5000 DigitalInput object
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamCom.m_DO">
            <summary>
            ADAM-4000 ADAM-5000 DigitalOutput object
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamCom.m_AI">
            <summary>
            ADAM-4000 ADAM-5000 AnalogInput object
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamCom.m_AO">
            <summary>
            ADAM-4000 ADAM-5000 AnalogOutput object
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamCom.m_Modbus">
            <summary>
            ADAM-4000 Modbus object
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamCom.m_Alarm">
            <summary>
            ADAM-4000 ADAM-5000 Alarm object
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamCom.m_Counter">
            <summary>
            ADAM-4000 ADAM-5000 Counter object
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamCom.m_Pid">
            <summary>
            The PID object
            </summary>
        </member>
        <member name="M:Advantech.Adam.AdamCom.ChecksumNumber(System.String)">
            <summary>
            Calculate the checksum
            </summary>
            <param name="i_szData">The string that is going to calculate the checksum</param>
            <returns>The checksum of the string.</returns>
        </member>
        <member name="M:Advantech.Adam.AdamCom.AppendChecksum(System.String@)">
            <summary>
            Append the checksum to the command
            </summary>
            <param name="io_szData">The string that is going to calculate and append the checksum</param>
        </member>
        <member name="M:Advantech.Adam.AdamCom.VfyTrimChecksum(System.String@)">
            <summary>
            Verify and trimoff the checksum of the response
            </summary>
            <param name="io_szData">The string that is going to verify and trimoff the checksum</param>
        </member>
        <member name="M:Advantech.Adam.AdamCom.#ctor(System.Int32)">
            <summary>
            AdamCom constructor.
            </summary>
            <param name="i_i32Port">The port number which is ranged from 1 to 256</param>
        </member>
        <member name="M:Advantech.Adam.AdamCom.Configuration(System.Int32)">
            <summary>
            ADAM-4000 ADAM-5000 Configuration object
            </summary>
            <param name="i_iAddr">The module address which is ranged from 0 to 255</param>
            <returns>AdamConfig object</returns>
        </member>
        <member name="M:Advantech.Adam.AdamCom.DigitalInput(System.Int32)">
            <summary>
            ADAM-4000 ADAM-5000 DigitalInput object
            </summary>
            <param name="i_iAddr">The module address which is ranged from 0 to 255</param>
            <returns>The DigitalInput object</returns>
        </member>
        <member name="M:Advantech.Adam.AdamCom.DigitalOutput(System.Int32)">
            <summary>
            ADAM-4000 ADAM-5000 DigitalOutput object
            </summary>
            <param name="i_iAddr">The module address which is ranged from 0 to 255</param>
            <returns>The DigitalOutput object</returns>
        </member>
        <member name="M:Advantech.Adam.AdamCom.AnalogInput(System.Int32)">
            <summary>
            ADAM-4000 ADAM-5000 AnalogInput object
            </summary>
            <param name="i_iAddr">The module address which is ranged from 0 to 255</param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AdamCom.AnalogOutput(System.Int32)">
            <summary>
            ADAM-4000 ADAM-5000 AnalogOutput object
            </summary>
            <param name="i_iAddr">The module address which is ranged from 0 to 255</param>
            <returns>The AnalogOutput object</returns>
        </member>
        <member name="M:Advantech.Adam.AdamCom.Modbus(System.Int32)">
            <summary>
            ADAM-4000 Modbus object
            </summary>
            <param name="i_iAddr">The module address which is ranged from 0 to 255</param>
            <returns>The Modbus object</returns>
        </member>
        <member name="M:Advantech.Adam.AdamCom.Alarm(System.Int32)">
            <summary>
            ADAM-4000 ADAM-5000 Alarm object
            </summary>
            <param name="i_iAddr">The module address which is ranged from 0 to 255</param>
            <returns>The Alarm object</returns>
        </member>
        <member name="M:Advantech.Adam.AdamCom.Counter(System.Int32)">
            <summary>
            ADAM-4000 ADAM-5000 Counter object
            </summary>
            <param name="i_iAddr">The module address which is ranged from 0 to 255</param>
            <returns>The Counter object</returns>
        </member>
        <member name="M:Advantech.Adam.AdamCom.Pid(System.Int32)">
            <summary>
            ADAM-4000 PID object
            </summary>
            <param name="i_iAddr">The module address which is ranged from 0 to 255</param>
            <returns>The PID object</returns>
        </member>
        <member name="M:Advantech.Adam.AdamCom.AdamTransaction(System.String,System.String@)">
            <summary>
            Send and receive ASCII command for ADAM modules 
            </summary>
            <param name="i_szSend">The command string to send</param>
            <param name="o_szRecv">The responsed string received</param>
            <returns>True if the transaction success.</returns>
        </member>
        <member name="P:Advantech.Adam.AdamCom.LastError">
            <summary>
            The last error code when function return false.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamCom.Checksum">
            <summary>
            Get/Set Checksum status when module runs on ASCII protocol.
            </summary>
        </member>
        <member name="T:Advantech.Adam.AdamInfoType">
            <summary>
            The type for getting Adam information by UDP broadcast
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamInfoType.AdamDeviceInfo">
            <summary>
            Get device information.
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamInfoType.AdamNetConfig">
            <summary>
            Get network configuration.
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamInfoType.AdamPortConfig">
            <summary>
            Get ADAM-5000 port setting.
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamInfoType.AdamDeviceConfig">
            <summary>
            Get device configuration.
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamInfoType.AdamWirelessConfig">
            <summary>
            Get wireless configuration.
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamInfoType.AdamReset">
            <summary>
            Reset ADAM command.
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamInfoType.AdvantechDevice">
            <summary>
            Get eAutomation device information.
            </summary>
        </member>
        <member name="T:Advantech.Adam.AdamInformation">
            <summary>
            The ADAM class to stroe all information about a module
            </summary>
        </member>
        <member name="M:Advantech.Adam.AdamInformation.#ctor">
            <summary>
            AdamInformation constuctor
            </summary>
        </member>
        <member name="M:Advantech.Adam.AdamInformation.SetDeviceID(System.Byte[],System.Int32)">
            <summary>
            Copy device ID from UDP packet to this object
            </summary>
            <param name="i_byBuffer">The UDP packet buffer.</param>
            <param name="i_iIndex">The byte index.</param>
        </member>
        <member name="M:Advantech.Adam.AdamInformation.SetIP(System.Byte[],System.Int32)">
            <summary>
            Copy IP from UDP packet to this object
            </summary>
            <param name="i_byBuffer">The UDP packet buffer.</param>
            <param name="i_iIndex">The byte index.</param>
        </member>
        <member name="M:Advantech.Adam.AdamInformation.SetMac(System.Byte[],System.Int32)">
            <summary>
            Copy MAC address from UDP packet to this object
            </summary>
            <param name="i_byBuffer">The UDP packet buffer.</param>
            <param name="i_iIndex">The byte index.</param>
        </member>
        <member name="M:Advantech.Adam.AdamInformation.SetSubnet(System.Byte[],System.Int32)">
            <summary>
            Copy subnet mask from UDP packet to this object
            </summary>
            <param name="i_byBuffer">The UDP packet buffer.</param>
            <param name="i_iIndex">The byte index.</param>
        </member>
        <member name="M:Advantech.Adam.AdamInformation.SetGateway(System.Byte[],System.Int32)">
            <summary>
            Copy default gateway from UDP packet to this object
            </summary>
            <param name="i_byBuffer">The UDP packet buffer.</param>
            <param name="i_iIndex">The byte index.</param>
        </member>
        <member name="M:Advantech.Adam.AdamInformation.SetPassword(System.Byte[],System.Int32)">
            <summary>
            Copy password from UDP packet to this object
            </summary>
            <param name="i_byBuffer">The UDP packet buffer.</param>
            <param name="i_iIndex">The byte index.</param>
        </member>
        <member name="M:Advantech.Adam.AdamInformation.SetDeviceName(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy device name from UDP packet to this object
            </summary>
            <param name="i_byBuffer">The UDP packet buffer.</param>
            <param name="i_iIndex">The byte index.</param>
            <param name="i_iLen">The device name length.</param>
        </member>
        <member name="M:Advantech.Adam.AdamInformation.SetDescription(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy device description from UDP packet to this object
            </summary>
            <param name="i_byBuffer">The UDP packet buffer.</param>
            <param name="i_iIndex">The byte index.</param>
            <param name="i_iLen">The description length.</param>
        </member>
        <member name="M:Advantech.Adam.AdamInformation.SetHostIdle(System.Byte[],System.Int32)">
            <summary>
            Copy host idle enabled from UDP packet to this object
            </summary>
            <param name="i_byBuffer">The UDP packet buffer.</param>
            <param name="i_iIndex">The byte index.</param>
        </member>
        <member name="M:Advantech.Adam.AdamInformation.SetHostIdleTime(System.Byte[],System.Int32)">
            <summary>
            Copy host idle time from UDP packet to this object
            </summary>
            <param name="i_byBuffer">The UDP packet buffer.</param>
            <param name="i_iIndex">The byte index.</param>
        </member>
        <member name="M:Advantech.Adam.AdamInformation.SetDatabits(System.Byte[],System.Int32)">
            <summary>
            Copy databits from UDP packet to this object
            </summary>
            <param name="i_byBuffer">The UDP packet buffer.</param>
            <param name="i_iIndex">The byte index.</param>
        </member>
        <member name="M:Advantech.Adam.AdamInformation.SetParity(System.Byte[],System.Int32)">
            <summary>
            Copy parity from UDP packet to this object
            </summary>
            <param name="i_byBuffer">The UDP packet buffer.</param>
            <param name="i_iIndex">The byte index.</param>
        </member>
        <member name="M:Advantech.Adam.AdamInformation.SetStopbits(System.Byte[],System.Int32)">
            <summary>
            Copy stopbits from UDP packet to this object
            </summary>
            <param name="i_byBuffer">The UDP packet buffer.</param>
            <param name="i_iIndex">The byte index.</param>
        </member>
        <member name="M:Advantech.Adam.AdamInformation.SetFlowControl(System.Byte[],System.Int32)">
            <summary>
            Copy flow control from UDP packet to this object
            </summary>
            <param name="i_byBuffer">The UDP packet buffer.</param>
            <param name="i_iIndex">The byte index.</param>
        </member>
        <member name="M:Advantech.Adam.AdamInformation.SetBaudrate(System.Byte[],System.Int32)">
            <summary>
            Copy baudrate from UDP packet to this object
            </summary>
            <param name="i_byBuffer">The UDP packet buffer.</param>
            <param name="i_iIndex">The byte index.</param>
        </member>
        <member name="M:Advantech.Adam.AdamInformation.SetFrameTimeout(System.Byte[],System.Int32)">
            <summary>
            Copy frame timeout from UDP packet to this object
            </summary>
            <param name="i_byBuffer">The UDP packet buffer.</param>
            <param name="i_iIndex">The byte index.</param>
        </member>
        <member name="M:Advantech.Adam.AdamInformation.SetHardwareType(System.Byte[],System.Int32)">
            <summary>
            Copy hardware type from UDP packet to this object
            </summary>
            <param name="i_byBuffer">The UDP packet buffer.</param>
            <param name="i_iIndex">The byte index.</param>
        </member>
        <member name="M:Advantech.Adam.AdamInformation.SetHeaderReserved(System.Byte[],System.Int32)">
            <summary>
            Copy header reserve field from UDP packet to this object
            </summary>
            <param name="i_byBuffer">The UDP packet buffer.</param>
            <param name="i_iIndex">The byte index.</param>
        </member>
        <member name="M:Advantech.Adam.AdamInformation.SetWirelessRegionFlag(System.Byte[],System.Int32)">
            <summary>
            Copy wireless region flag from UDP packet to this object
            </summary>
            <param name="i_byBuffer">The UDP packet buffer.</param>
            <param name="i_iIndex">The byte index.</param>
        </member>
        <member name="M:Advantech.Adam.AdamInformation.SetWirelessRegion(System.Byte[],System.Int32)">
            <summary>
            Copy wireless region from UDP packet to this object
            </summary>
            <param name="i_byBuffer">The UDP packet buffer.</param>
            <param name="i_iIndex">The byte index.</param>
        </member>
        <member name="M:Advantech.Adam.AdamInformation.SetWirelessModeFlag(System.Byte[],System.Int32)">
            <summary>
            Copy wireless mode flag from UDP packet to this object
            </summary>
            <param name="i_byBuffer">The UDP packet buffer.</param>
            <param name="i_iIndex">The byte index.</param>
        </member>
        <member name="M:Advantech.Adam.AdamInformation.SetWirelessMode(System.Byte[],System.Int32)">
            <summary>
            Copy wireless mode from UDP packet to this object
            </summary>
            <param name="i_byBuffer">The UDP packet buffer.</param>
            <param name="i_iIndex">The byte index.</param>
        </member>
        <member name="M:Advantech.Adam.AdamInformation.SetWirelessChannel(System.Byte[],System.Int32)">
            <summary>
            Copy wireless channel from UDP packet to this object
            </summary>
            <param name="i_byBuffer">The UDP packet buffer.</param>
            <param name="i_iIndex">The byte index.</param>
        </member>
        <member name="M:Advantech.Adam.AdamInformation.SetBasicRate(System.Byte[],System.Int32)">
            <summary>
            Copy wireless basic rate from UDP packet to this object
            </summary>
            <param name="i_byBuffer">The UDP packet buffer.</param>
            <param name="i_iIndex">The byte index.</param>
        </member>
        <member name="M:Advantech.Adam.AdamInformation.SetInitSSIDLength(System.Byte[],System.Int32)">
            <summary>
            Copy wireless initial SSID length from UDP packet to this object
            </summary>
            <param name="i_byBuffer">The UDP packet buffer.</param>
            <param name="i_iIndex">The byte index.</param>
        </member>
        <member name="M:Advantech.Adam.AdamInformation.SetInitSSID(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy wireless initial SSID from UDP packet to this object
            </summary>
            <param name="i_byBuffer">The UDP packet buffer.</param>
            <param name="i_iIndex">The byte index.</param>
            <param name="i_iLen">The SSID length.</param>
        </member>
        <member name="M:Advantech.Adam.AdamInformation.SetSSIDLength(System.Byte[],System.Int32)">
            <summary>
            Copy wireless SSID length from UDP packet to this object
            </summary>
            <param name="i_byBuffer">The UDP packet buffer.</param>
            <param name="i_iIndex">The byte index.</param>
        </member>
        <member name="M:Advantech.Adam.AdamInformation.SetSSID(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy wireless SSID from UDP packet to this object
            </summary>
            <param name="i_byBuffer">The UDP packet buffer.</param>
            <param name="i_iIndex">The byte index.</param>
            <param name="i_iLen">The SSID length.</param>
        </member>
        <member name="M:Advantech.Adam.AdamInformation.SetWEP(System.Byte[],System.Int32)">
            <summary>
            Copy wireless WEP key from UDP packet to this object
            </summary>
            <param name="i_byBuffer">The UDP packet buffer.</param>
            <param name="i_iIndex">The byte index.</param>
        </member>
        <member name="M:Advantech.Adam.AdamInformation.SetWEPKey64(System.Byte[],System.Int32)">
            <summary>
            Copy wireless 64 bits WEP key from UDP packet to this object
            </summary>
            <param name="i_byBuffer">The UDP packet buffer.</param>
            <param name="i_iIndex">The byte index.</param>
        </member>
        <member name="M:Advantech.Adam.AdamInformation.SetWEPKey128(System.Byte[],System.Int32)">
            <summary>
            Copy wireless 128 bits WEP key from UDP packet to this object
            </summary>
            <param name="i_byBuffer">The UDP packet buffer.</param>
            <param name="i_iIndex">The byte index.</param>
        </member>
        <member name="M:Advantech.Adam.AdamInformation.CopyTo(Advantech.Adam.AdamInformation@)">
            <summary>
            Copy to another AdamInformation object.
            </summary>
            <param name="adamObj">The target AdamInformation object.</param>
        </member>
        <member name="P:Advantech.Adam.AdamInformation.DeviceID">
            <summary>
            Get/set device ID.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamInformation.IP">
            <summary>
            The IP address.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamInformation.Mac">
            <summary>
            The MAC address.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamInformation.NewMac">
            <summary>
            The new MAC address.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamInformation.Subnet">
            <summary>
            The subnet mask.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamInformation.Gateway">
            <summary>
            The default gateway.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamInformation.Password">
            <summary>
            The password.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamInformation.DeviceName">
            <summary>
            The device name.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamInformation.Description">
            <summary>
            The description.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamInformation.HostIdle">
            <summary>
            The host idle status.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamInformation.HostIdleTime">
            <summary>
            The host idle time.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamInformation.Databits">
            <summary>
            The databits.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamInformation.Parity">
            <summary>
            The parity.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamInformation.Stopbits">
            <summary>
            The stop bits.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamInformation.FlowControl">
            <summary>
            The flow control.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamInformation.Baudrate">
            <summary>
            The baudrate.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamInformation.FrameTimeout">
            <summary>
            The frame timeout.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamInformation.HardwareType">
            <summary>
            The hardware type.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamInformation.HeaderReserved">
            <summary>
            The header reserved field.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamInformation.WirelessRegionFlag">
            <summary>
            The wireless region flag.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamInformation.WirelessRegion">
            <summary>
            The wireless region.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamInformation.WirelessModeFlag">
            <summary>
            The wireless mode flag.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamInformation.WirelessMode">
            <summary>
            The wireless mode.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamInformation.WirelessChannel">
            <summary>
            The  wireless channel.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamInformation.BasicRate">
            <summary>
            The wireless basic rate.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamInformation.InitSSIDLength">
            <summary>
            The wireless initial SSID length.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamInformation.InitSSID">
            <summary>
            The wireless initial SSID.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamInformation.SSIDLength">
            <summary>
            The wireless SSID length.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamInformation.SSID">
            <summary>
            The wireless SSID.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamInformation.WEP">
            <summary>
            The wireless WEP key.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamInformation.WEPKey64">
            <summary>
            The wireless 64 bits WEP key.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamInformation.WEPKey128">
            <summary>
            The wireless 128 bits WEP key.
            </summary>
        </member>
        <member name="T:Advantech.Adam.AdamMacComparer">
            <summary>
            The class is used for comparing the MAC address for ADAM.
            </summary>
        </member>
        <member name="T:Advantech.Adam.AdamSocket">
            <summary>
            ADAM ethernet communication class library for ADAM series.
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamSocket.m_sendTimeout">
            <summary>
            The sending timeout
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamSocket.m_recvTimeout">
            <summary>
            The receiving timeout
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamSocket.m_connectTimeout">
            <summary>
            The connection timeout
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamSocket.m_port">
            <summary>
            The port number
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamSocket.m_ipAddr">
            <summary>
            The IP address
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamSocket.m_socket">
            <summary>
            The Socket object
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamSocket.m_Config">
            <summary>
            The Configuration object
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamSocket.m_DI">
            <summary>
            The DigitalInput object
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamSocket.m_DO">
            <summary>
            The DigitalOutput object
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamSocket.m_AI">
            <summary>
            The AnalogInput object
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamSocket.m_AO">
            <summary>
            The AnalogOutput object
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamSocket.m_Modbus">
            <summary>
            The Modbus object
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamSocket.m_Alarm">
            <summary>
            The Alarm object
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamSocket.m_Counter">
            <summary>
            The Counter object
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamSocket.m_Pid">
            <summary>
            The PID object
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamSocket.m_b5000Found">
            <summary>
            
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamSocket.m_bWirelessFound">
            <summary>
            
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamSocket.m_byMsgID">
            <summary>
            
            </summary>
        </member>
        <member name="F:Advantech.Adam.AdamSocket.m_error">
            <summary>
            The last error code
            </summary>
        </member>
        <member name="M:Advantech.Adam.AdamSocket.#ctor">
            <summary>
            The AdamSocket constructor
            </summary>
        </member>
        <member name="M:Advantech.Adam.AdamSocket.GetProtocolType">
            <summary>
            Get the socket protocol type
            </summary>
            <returns>The socket protocol type</returns>
        </member>
        <member name="M:Advantech.Adam.AdamSocket.GetIP">
            <summary>
            Get the IP string
            </summary>
            <returns>The IP string</returns>
        </member>
        <member name="M:Advantech.Adam.AdamSocket.Configuration">
            <summary>
            ADAM-5000TCP ADAM-6000 Configuration object
            </summary>
            <returns>The Configuration object</returns>
        </member>
        <member name="M:Advantech.Adam.AdamSocket.Configuration(System.Int32)">
            <summary>
            ADAM-5000TCP ADAM-6000 Configuration object
            </summary>
            <param name="i_iAddr">The module address which is ranged from 0 to 255</param>
            <returns>The Configuration object</returns>
        </member>
        <member name="M:Advantech.Adam.AdamSocket.DigitalInput">
            <summary>
            ADAM-5000TCP ADAM-6000 DigitalInput object
            </summary>
            <returns>The DigitalInput object</returns>
        </member>
        <member name="M:Advantech.Adam.AdamSocket.DigitalInput(System.Int32)">
            <summary>
            ADAM-5000TCP ADAM-6000 DigitalInput object
            </summary>
            <param name="i_iAddr">The module address which is ranged from 0 to 255</param>
            <returns>The DigitalInput object</returns>
        </member>
        <member name="M:Advantech.Adam.AdamSocket.DigitalOutput">
            <summary>
            ADAM-5000TCP ADAM-6000 DigitalOutput object
            </summary>
            <returns>The DigitalOutput object</returns>
        </member>
        <member name="M:Advantech.Adam.AdamSocket.DigitalOutput(System.Int32)">
            <summary>
            ADAM-5000TCP ADAM-6000 DigitalOutput object
            </summary>
            <param name="i_iAddr">The module address which is ranged from 0 to 255</param>
            <returns>The DigitalOutput object</returns>
        </member>
        <member name="M:Advantech.Adam.AdamSocket.AnalogInput">
            <summary>
            ADAM-5000TCP ADAM-6000 AnalogInput object
            </summary>
            <returns>The AnalogInput object</returns>
        </member>
        <member name="M:Advantech.Adam.AdamSocket.AnalogInput(System.Int32)">
            <summary>
            ADAM-5000TCP ADAM-6000 AnalogInput object
            </summary>
            <param name="i_iAddr">The module address which is ranged from 0 to 255</param>
            <returns>The AnalogInput object</returns>
        </member>
        <member name="M:Advantech.Adam.AdamSocket.AnalogOutput">
            <summary>
            ADAM-5000TCP ADAM-6000 AnalogOutput object
            </summary>
            <returns>The AnalogOutput object</returns>
        </member>
        <member name="M:Advantech.Adam.AdamSocket.AnalogOutput(System.Int32)">
            <summary>
            ADAM-5000TCP ADAM-6000 AnalogOutput object
            </summary>
            <param name="i_iAddr">The module address which is ranged from 0 to 255</param>
            <returns>The AnalogOutput object</returns>
        </member>
        <member name="M:Advantech.Adam.AdamSocket.Modbus">
            <summary>
            ADAM-5000TCP ADAM-6000 Modbus object
            </summary>
            <returns>The Modbus object</returns>
        </member>
        <member name="M:Advantech.Adam.AdamSocket.Modbus(System.Int32)">
            <summary>
            ADAM-5000TCP ADAM-6000 Modbus object
            </summary>
            <param name="i_iAddr">The module address which is ranged from 0 to 255</param>
            <returns>The Modbus object</returns>
        </member>
        <member name="M:Advantech.Adam.AdamSocket.Alarm">
            <summary>
            ADAM-5000TCP ADAM-6000 Alarm object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AdamSocket.Alarm(System.Int32)">
            <summary>
            ADAM-5000TCP ADAM-6000 Alarm object
            </summary>
            <param name="i_iAddr">The module address which is ranged from 0 to 255</param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AdamSocket.Counter">
            <summary>
            ADAM-5000TCP ADAM-6000 Counter object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AdamSocket.Counter(System.Int32)">
            <summary>
            ADAM-5000TCP ADAM-6000 Counter object
            </summary>
            <param name="i_iAddr">The module address which is ranged from 0 to 255</param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AdamSocket.Pid">
            <summary>
            ADAM-6000 PID object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AdamSocket.Pid(System.Int32)">
            <summary>
            ADAM-6000 PID object
            </summary>
            <param name="i_iAddr">The module address which is ranged from 0 to 255</param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AdamSocket.SetTimeout(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the timeout constances for socket
            </summary>
            <param name="i_iConnectTimeout">The connection timeout.</param>
            <param name="i_iSendTimeout">The sending timeout</param>
            <param name="i_iRecvTimeout">The receiving timeout</param>
        </member>
        <member name="M:Advantech.Adam.AdamSocket.ConnectCallback(System.IAsyncResult)">
            <summary>
            Connect callback function
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:Advantech.Adam.AdamSocket.Connect(Advantech.Adam.AdamType,System.String,System.Net.Sockets.ProtocolType)">
            <summary>
            Connect to an ADAM module
            </summary>
            <param name="i_type">Adam module type.</param>
            <param name="i_szIPAddr">The IP address.</param>
            <param name="protocolType">The protocol type.</param>
            <returns>True, if successed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AdamSocket.Connect(System.String,System.Net.Sockets.ProtocolType,System.Int32)">
            <summary>
            Connect to a TCP/UDP module
            </summary>
            <param name="i_szIPAddr">The IP address.</param>
            <param name="protocolType">The protocol type.</param>
            <param name="i_iPort">The port number.</param>
            <returns>True, if successed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AdamSocket.Disconnect">
            <summary>
            Disconnect the socket
            </summary>
        </member>
        <member name="M:Advantech.Adam.AdamSocket.Send(System.Byte[],System.Int32)">
            <summary>
            Send data to the connected module
            </summary>
            <param name="i_byData">The data bytes.</param>
            <param name="i_iLen">The length of the data.</param>
            <returns>True, if successed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AdamSocket.Receive(System.Byte[],System.Int32@)">
            <summary>
            Receive data from connected module. 
            This function will receive as many data as the length of i_byData within receiving timeout.
            The actually received data length will be returned in the o_iLen.
            </summary>
            <param name="i_byData">The receiving buffer.</param>
            <param name="o_iLen">The received data length</param>
            <returns>True, if successed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AdamSocket.AdamTransaction(System.String,System.String@)">
            <summary>
            Send data to and received data from an ADAM module
            </summary>
            <param name="i_szSend">The ASCII command to send.</param>
            <param name="o_szRecv">The ASCII response from ADAM module.</param>
            <returns>True, if successed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AdamSocket.AdamUDPTransaction(System.String,System.String@)">
            <summary>
            
            </summary>
            <param name="i_szSend"></param>
            <param name="o_szRecv"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AdamSocket.AdamTCPTransaction(System.String,System.String@)">
            <summary>
            
            </summary>
            <param name="i_szSend"></param>
            <param name="o_szRecv"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AdamSocket.GetLocalNetwork(System.String[]@)">
            <summary>
            Get the local network card IP
            </summary>
            <param name="o_szLocalIP"></param>
        </member>
        <member name="M:Advantech.Adam.AdamSocket.GetAdamInformation(Advantech.Adam.AdamInfoType,System.Int32,System.Collections.ArrayList@)">
            <summary>
            
            </summary>
            <param name="i_infoType"></param>
            <param name="i_iTimeout"></param>
            <param name="adamList"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AdamSocket.GetAdamDeviceList(System.Int32,System.Collections.ArrayList@)">
            <summary>
            Get the ADAM device list by using UDP broadcast.
            </summary>
            <param name="i_iTimeout">The timeout for each information type.</param>
            <param name="o_lstAdam">The array list which holds the ADAM information.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.AdamSocket.GetAdvantechDeviceList(System.Int32,System.Collections.ArrayList@)">
            <summary>
            Get the Advantech device list by using UDP broadcast.
            </summary>
            <param name="i_iTimeout">The timeout for each information type.</param>
            <param name="o_lstAdam">The array list which holds the Advantech device information.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.AdamSocket.SetAdamInformation(Advantech.Adam.AdamInfoType,System.Int32,Advantech.Adam.AdamInformation)">
            <summary>
            Set the ADAM device information by using UDP broadcast.
            </summary>
            <param name="i_infoType">The ADAM information type.</param>
            <param name="i_iTimeout">The timeout for setting ADAM information.</param>
            <param name="i_adamObject">The ADAM information object which must be get by calling GetAdamDeviceList.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="P:Advantech.Adam.AdamSocket.LastError">
            <summary>
            The last error code when function return false.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamSocket.AdamSeriesType">
            <summary>
            The Adam series type
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamSocket.Adam5000Found">
            <summary>
            The flag indicates the ADAM-5000 was found or not.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamSocket.WirelessFound">
            <summary>
            The flag indicates the ADAM-6000W was found or not.
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam_AIAlarmMode">
            <summary>
            The AI alarm mode
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_AIAlarmMode.Disable">
            <summary>
            Disable, 'D'
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_AIAlarmMode.Latch">
            <summary>
            Latch, 'L'
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_AIAlarmMode.Momentary">
            <summary>
            Momentary, 'M'
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_AIAlarmMode.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam4000_CounterAlarmMode">
            <summary>
            The counter alarm mode for ADAM-4000
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000_CounterAlarmMode.Disable">
            <summary>
            Disable, 'D'
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000_CounterAlarmMode.Latch">
            <summary>
            Latch, 'L'
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000_CounterAlarmMode.Momentary">
            <summary>
            Momentary, 'M'
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000_CounterAlarmMode.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam5000_CounterAlarmMode">
            <summary>
            The counter alarm mode for ADAM-5000
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5000_CounterAlarmMode.Disable">
            <summary>
            Disable, 'D'
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5000_CounterAlarmMode.Latch">
            <summary>
            Latch, 'L'
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5000_CounterAlarmMode.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:Advantech.Adam.Alarm">
            <summary>
            Summary description for Alarm.
            </summary>
        </member>
        <member name="M:Advantech.Adam.Alarm.#ctor(Advantech.Adam.AdamCom)">
            <summary>
            The Alarm constructor.
            </summary>
            <param name="i_com">The AdamCom object.</param>
        </member>
        <member name="M:Advantech.Adam.Alarm.#ctor(Advantech.Adam.AdamSocket)">
            <summary>
            The Alarm constructor.
            </summary>
            <param name="i_socket">The AdamSocket object.</param>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetMode(System.Int32,System.Int32,System.Int32,Advantech.Adam.Adam_AIAlarmMode@)">
            <summary>
            
            </summary>
            <param name="i_iSlot"></param>
            <param name="i_iChannel"></param>
            <param name="i_iHighLow">0: low, 1: high</param>
            <param name="o_mode"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetMode(System.Int32,System.Int32,System.Int32,Advantech.Adam.Adam5000_CounterAlarmMode@)">
            <summary>
            
            </summary>
            <param name="i_iSlot"></param>
            <param name="i_iChannel"></param>
            <param name="i_iHighLow">0: low, 1: high</param>
            <param name="o_mode"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.SetMode(System.Int32,System.Int32,System.Int32,Advantech.Adam.Adam_AIAlarmMode)">
            <summary>
            
            </summary>
            <param name="i_iSlot"></param>
            <param name="i_iChannel"></param>
            <param name="i_iHighLow"></param>
            <param name="i_mode"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.SetMode(System.Int32,System.Int32,System.Int32,Advantech.Adam.Adam5000_CounterAlarmMode)">
            <summary>
            
            </summary>
            <param name="i_iSlot"></param>
            <param name="i_iChannel"></param>
            <param name="i_iHighLow"></param>
            <param name="i_mode"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetLimit(System.Int32,System.Int32,System.Int32,System.Single@)">
            <summary>
            
            </summary>
            <param name="i_iSlot"></param>
            <param name="i_iChannel"></param>
            <param name="i_iHighLow"></param>
            <param name="o_fLimit"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.SetLimit(System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            
            </summary>
            <param name="i_iSlot"></param>
            <param name="i_iChannel"></param>
            <param name="i_iHighLow"></param>
            <param name="i_fLimit"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetLimit(System.Int32,System.Int32,System.Int32,System.Int64@)">
            <summary>
            
            </summary>
            <param name="i_iSlot"></param>
            <param name="i_iChannel"></param>
            <param name="i_iHighLow"></param>
            <param name="o_lLimit"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.SetLimit(System.Int32,System.Int32,System.Int32,System.Int64)">
            <summary>
            
            </summary>
            <param name="i_iSlot"></param>
            <param name="i_iChannel"></param>
            <param name="i_iHighLow"></param>
            <param name="i_lLimit"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetMapping(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Get digital output slot and channel that the high alarm maps to.
            </summary>
            <param name="i_iSlot">The slot index.</param>
            <param name="i_iChannel">The channel index.</param>
            <param name="i_iHighLow">0: Low, 1: High</param>
            <param name="o_iSlot">The mapped digital output slot. If there is no mapping, this value will be -1.</param>
            <param name="o_iChannel">The mapped digital output channel. If there is no mapping, this value will be -1.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.SetMapping(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="i_iSlot"></param>
            <param name="i_iChannel"></param>
            <param name="i_iHighLow"></param>
            <param name="i_iSlotMap"></param>
            <param name="i_iChMap"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.SetLatchClear(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="i_iSlot"></param>
            <param name="i_iChannel"></param>
            <param name="i_iHighLow"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetModeTotal(Advantech.Adam.Adam4000Type)">
            <summary>
            Support module: ADAM-4000.
            Get the range total
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <returns>Return mode total if success, otherwise, return 0.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetModeCode(Advantech.Adam.Adam4000Type,System.Int32)">
            <summary>
            Support module: ADAM-4000.
            Get the alarm code
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <param name="i_iIndex">The alarm code index</param>
            <returns>Return range code if success, otherwise, return 255</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetModeIndex(Advantech.Adam.Adam4000Type,System.Byte)">
            <summary>
            Support module: ADAM-4000.
            Get the alarm code index
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <param name="i_byMode">The alarm code.</param>
            <returns>Return range code index if success, otherwise, return -1</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetModeName(Advantech.Adam.Adam4000Type,System.Byte)">
            <summary>
            Support module: ADAM-4000.
            Get the alarm mode name
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <param name="i_byMode">The mode code.</param>
            <returns>Return range code if success, otherwise, return empty string</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetModeTotal(Advantech.Adam.Adam5000Type)">
            <summary>
            Support module: ADAM-5000.
            Get the alarm mode total
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <returns>Return mode total if success, otherwise, return 0.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetModeCode(Advantech.Adam.Adam5000Type,System.Int32)">
            <summary>
            Support module: ADAM-5000.
            Get the alarm code
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <param name="i_iIndex">The alarm code index</param>
            <returns>Return range code if success, otherwise, return 255</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetModeIndex(Advantech.Adam.Adam5000Type,System.Byte)">
            <summary>
            Support module: ADAM-5000.
            Get the alarm code index
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <param name="i_byMode">The alarm code.</param>
            <returns>Return range code index if success, otherwise, return -1</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetModeName(Advantech.Adam.Adam5000Type,System.Byte)">
            <summary>
            Support module: ADAM-5000.
            Get the alarm mode name
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <param name="i_byMode">The mode code.</param>
            <returns>Return range code if success, otherwise, return empty string</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetModeTotal(Advantech.Adam.Adam6000Type)">
            <summary>
            Support module: ADAM-6000.
            Get the range total
            </summary>
            <param name="adam6000Type">ADAM-6000 type</param>
            <returns>Return mode total if success, otherwise, return 0.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetModeCode(Advantech.Adam.Adam6000Type,System.Int32)">
            <summary>
            Support module: ADAM-6000.
            Get the alarm code
            </summary>
            <param name="adam6000Type">ADAM-6000 type</param>
            <param name="i_iIndex">The alarm code index</param>
            <returns>Return range code if success, otherwise, return 255</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetModeIndex(Advantech.Adam.Adam6000Type,System.Byte)">
            <summary>
            Support module: ADAM-6000.
            Get the alarm code index
            </summary>
            <param name="adam6000Type">ADAM-6000 type</param>
            <param name="i_byMode">The alarm code.</param>
            <returns>Return range code index if success, otherwise, return -1</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetModeName(Advantech.Adam.Adam6000Type,System.Byte)">
            <summary>
            Support module: ADAM-6000.
            Get the alarm mode name
            </summary>
            <param name="adam6000Type">ADAM-6000 type</param>
            <param name="i_byMode">The mode code.</param>
            <returns>Return range code if success, otherwise, return empty string</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetModeAlarmDO(System.Int32,Advantech.Adam.Adam_AIAlarmMode@,System.Boolean[]@)">
            <summary>
            Support module: ADAM-4011, ADAM-4011D, ADAM-4012, ADAM-4016.
            Get analog input alarm mode and the alarm DO status.
            </summary>
            <param name="i_iDOTotal">The total of the DO on the module. Must be 4 for ADAM-4016, and 2 for the others.</param>
            <param name="o_mode">The alarm mode.</param>
            <param name="o_bAlarmDO">The array of DO values.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.SetAlarmDO(System.Boolean[])">
            <summary>
            Support module: ADAM-4011, ADAM-4011D, ADAM-4012, ADAM-4016, ADAM-4080, ADAM-4080D.
            Set the alarm DO values.
            </summary>
            <param name="i_bAlarmDO">The array of DO values. The length of the array must be 2.</param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.SetExtDO(System.Boolean[])">
            <summary>
            Support module: ADAM-4016.
            Set the extra DO values. The DO-2 and DO-3 on the module.
            </summary>
            <param name="i_bAlarmDO">The array of DO values. The length of the array must be 2.</param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.SetMode(Advantech.Adam.Adam_AIAlarmMode)">
            <summary>
            Support module: ADAM-4011, ADAM-4011D, ADAM-4012, ADAM-4016.
            Set analog input alarm mode. After the mode is set, you have to wait 2 seconds to let it takes effect.
            </summary>
            <param name="i_mode">The alarm mode.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.SetLatchClear">
            <summary>
            Support module: ADAM-4011, ADAM-4011D, ADAM-4012, ADAM-4016, ADAM-4080D.
            Set the latch alarm to be cleared.
            </summary>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetHighLimit(System.Single@)">
            <summary>
            Support module: ADAM-4011, ADAM-4011D, ADAM-4012, ADAM-4016.
            Get analog input high alarm limit
            </summary>
            <param name="o_fLimit">The alarm limit value.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.SetHighLimit(System.Single)">
            <summary>
            Support module: ADAM-4011, ADAM-4011D, ADAM-4012, ADAM-4016.
            Set analog input high alarm limit
            </summary>
            <param name="i_fLimit">The alarm limit value.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetLowLimit(System.Single@)">
            <summary>
            Support module: ADAM-4011, ADAM-4011D, ADAM-4012, ADAM-4016.
            Get analog input low alarm limit
            </summary>
            <param name="o_fLimit">The alarm limit value.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.SetLowLimit(System.Single)">
            <summary>
            Support module: ADAM-4011, ADAM-4011D, ADAM-4012, ADAM-4016.
            Set analog input low alarm limit
            </summary>
            <param name="i_fLimit">The alarm limit value.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetLimit(System.Int32,System.Single@,System.Single@)">
            <summary>
            Support module: ADAM-4018M.
            Get analog input high and low alarm limit
            </summary>
            <param name="i_iChannel">The channel index. The range is between 0~7.</param>
            <param name="o_fHighLimit">The high alarm limit value.</param>
            <param name="o_fLowLimit">The low alarm limit value.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.SetLimit(System.Int32,System.Single,System.Single)">
            <summary>
            Support module: ADAM-4018M.
            Set analog input high and low alarm limit
            </summary>
            <param name="i_iChannel">The channel index. The range is between 0~7.</param>
            <param name="i_fHighLimit">The high alarm limit value.</param>
            <param name="i_fLowLimit">The low alarm limit value.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetEnableAlarmDO(System.Boolean[]@,System.Boolean[]@)">
            <summary>
            Support module: ADAM-4080.
            Get alarm enabled status and the alarm DO status.
            </summary>
            <param name="o_bEnable">The array of alarm enabled status.</param>
            <param name="o_bAlarmDO">The array of DO values.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.SetEnable(System.Int32,System.Boolean)">
            <summary>
            Support module: ADAM-4080.
            Set alarm enabled for the specified counter channel.
            </summary>
            <param name="i_iChannel">The channel index. The range is between 0~1.</param>
            <param name="i_bEnable">The alarm enabled/disabled.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetModeAlarmDO(Advantech.Adam.Adam4000_CounterAlarmMode@,System.Boolean[]@)">
            <summary>
            Support module: ADAM-4080D.
            Get alarm mode and the alarm DO status.
            </summary>
            <param name="o_mode">The alarm mode of counter-0. Only the counter-0 has alarm.</param>
            <param name="o_bAlarmDO">The array of DO values.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.SetMode(Advantech.Adam.Adam4000_CounterAlarmMode)">
            <summary>
            Support module: ADAM-4080D.
            Set counter alarm mode for counter-0. After the mode is set, you have to wait 2 seconds to let it takes effect.
            </summary>
            <param name="i_mode">The alarm mode.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetHighLimit(System.Int64@)">
            <summary>
            Support module: ADAM-4080D.
            Get high alarm limit for counter-0.
            </summary>
            <param name="o_lValue">The high alarm limit.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.SetHighLimit(System.Int64)">
            <summary>
            Support module: ADAM-4080D.
            Set high alarm limit for counter-0.
            </summary>
            <param name="i_lValue">The high alarm limit value.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetLowLimit(System.Int64@)">
            <summary>
            Support module: ADAM-4080D.
            Get low alarm limit for counter-0.
            </summary>
            <param name="o_lValue">The low alarm limit.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.SetLowLimit(System.Int64)">
            <summary>
            Support module: ADAM-4080D.
            Set low alarm limit for counter-0.
            </summary>
            <param name="i_lValue">The low alarm limit value.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetLimit(System.Int32,System.Int64@)">
            <summary>
            Support module: ADAM-4080.
            Get alarm limit for the specified counter channel.
            </summary>
            <param name="i_iChannel">The channel index. The range is between 0~1.</param>
            <param name="o_lValue">The alarm limit.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.SetLimit(System.Int32,System.Int64)">
            <summary>
            Support module: ADAM-4080.
            Set alarm limit for the specified counter channel.
            </summary>
            <param name="i_iChannel">The channel index. The value is between 0~1.</param>
            <param name="i_lValue">The alarm limit value.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetHighMode(System.Int32,System.Int32,Advantech.Adam.Adam_AIAlarmMode@)">
            <summary>
            Support module: ADAM-5013, ADAM-5017, ADAM-5017H, ADAM-5017UH, ADAM-5018, ADAM-5018P.
            Get analog input High Alarm mode
            </summary>
            <param name="i_iSlot">The slot index.</param>
            <param name="i_iChannel">The channel index.</param>
            <param name="o_mode">The alarm mode.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetHighMode(System.Int32,System.Int32,Advantech.Adam.Adam5000_CounterAlarmMode@)">
            <summary>
            Support module: ADAM-5080.
            Get counter high alarm mode
            </summary>
            <param name="i_iSlot">The slot index.</param>
            <param name="i_iChannel">The channel index.</param>
            <param name="o_mode">The alarm mode.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetHighMode(System.Int32,Advantech.Adam.Adam_AIAlarmMode@)">
            <summary>
            Support module: ADAM-6015, ADAM-6017, ADAM-6018.
            Get analog input High Alarm mode
            </summary>
            <param name="i_iChannel">The channel index.</param>
            <param name="o_mode">The alarm mode.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.SetHighMode(System.Int32,System.Int32,Advantech.Adam.Adam_AIAlarmMode)">
            <summary>
            Support module: ADAM-5013, ADAM-5017, ADAM-5017H, ADAM-5017UH, ADAM-5018, ADAM-5018P.
            Set analog input high alarm mode
            </summary>
            <param name="i_iSlot">The slot index.</param>
            <param name="i_iChannel">The channel index.</param>
            <param name="i_mode">The alarm mode.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.SetHighMode(System.Int32,System.Int32,Advantech.Adam.Adam5000_CounterAlarmMode)">
            <summary>
            Support module: ADAM-5080.
            Set counter high alarm mode
            </summary>
            <param name="i_iSlot">The slot index.</param>
            <param name="i_iChannel">The channel index.</param>
            <param name="i_mode">The alarm mode.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.SetHighMode(System.Int32,Advantech.Adam.Adam_AIAlarmMode)">
            <summary>
            Support module: ADAM-6015, ADAM-6017, ADAM-6018.
            Set analog input high alarm mode
            </summary>
            <param name="i_iChannel">The channel index.</param>
            <param name="i_mode">The alarm mode.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetLowMode(System.Int32,System.Int32,Advantech.Adam.Adam_AIAlarmMode@)">
            <summary>
            Support module: ADAM-5013, ADAM-5017, ADAM-5017H, ADAM-5017UH, ADAM-5018, ADAM-5018P.
            Get analog input low alarm mode
            </summary>
            <param name="i_iSlot">The slot index.</param>
            <param name="i_iChannel">The channel index.</param>
            <param name="o_mode">The alarm mode.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetLowMode(System.Int32,System.Int32,Advantech.Adam.Adam5000_CounterAlarmMode@)">
            <summary>
            Support module: ADAM-5080.
            Get counter low alarm mode
            </summary>
            <param name="i_iSlot">The slot index.</param>
            <param name="i_iChannel">The channel index.</param>
            <param name="o_mode">The alarm mode.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetLowMode(System.Int32,Advantech.Adam.Adam_AIAlarmMode@)">
            <summary>
            Support module: ADAM-6015, ADAM-6017, ADAM-6018.
            Get analog input low alarm mode
            </summary>
            <param name="i_iChannel">The channel index.</param>
            <param name="o_mode">The alarm mode.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.SetLowMode(System.Int32,System.Int32,Advantech.Adam.Adam_AIAlarmMode)">
            <summary>
            Support module: ADAM-5013, ADAM-5017, ADAM-5017H, ADAM-5017UH, ADAM-5018, ADAM-5018P.
            Set analog input low alarm mode
            </summary>
            <param name="i_iSlot">The slot index.</param>
            <param name="i_iChannel">The channel index.</param>
            <param name="i_mode">The alarm mode.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.SetLowMode(System.Int32,System.Int32,Advantech.Adam.Adam5000_CounterAlarmMode)">
            <summary>
            Support module: ADAM-5080.
            Set counter low alarm mode
            </summary>
            <param name="i_iSlot">The slot index.</param>
            <param name="i_iChannel">The channel index.</param>
            <param name="i_mode">The alarm mode.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.SetLowMode(System.Int32,Advantech.Adam.Adam_AIAlarmMode)">
            <summary>
            Support module: ADAM-6015, ADAM-6017, ADAM-6018.
            Set analog input low alarm mode
            </summary>
            <param name="i_iChannel">The channel index.</param>
            <param name="i_mode">The alarm mode.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetHighLimit(System.Int32,System.Int32,System.Single@)">
            <summary>
            Support module: ADAM-5013, ADAM-5017, ADAM-5017H, ADAM-5017UH, ADAM-5018, ADAM-5018P.
            Get analog input high alarm limit
            </summary>
            <param name="i_iSlot">The slot index.</param>
            <param name="i_iChannel">The channel index.</param>
            <param name="o_fLimit">The alarm limit value.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetHighLimit(System.Int32,System.Int32,System.Int64@)">
            <summary>
            Support module: ADAM-5080.
            Get counter high alarm limit
            </summary>
            <param name="i_iSlot">The slot index.</param>
            <param name="i_iChannel">The channel index.</param>
            <param name="o_lLimit">The alarm limit value.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetHighLimit(System.Int32,System.Single@)">
            <summary>
            Support module: ADAM-6015, ADAM-6017, ADAM-6018.
            Get analog input high alarm limit
            </summary>
            <param name="i_iChannel">The channel index.</param>
            <param name="o_fLimit">The alarm limit value.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.SetHighLimit(System.Int32,System.Int32,System.Single)">
            <summary>
            Support module: ADAM-5013, ADAM-5017, ADAM-5017H, ADAM-5017UH, ADAM-5018, ADAM-5018P.
            Set analog input high alarm limit
            </summary>
            <param name="i_iSlot">The slot index.</param>
            <param name="i_iChannel">The channel index.</param>
            <param name="i_fLimit">The alarm limit value.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.SetHighLimit(System.Int32,System.Int32,System.Int64)">
            <summary>
            Support module: ADAM-5080.
            Set counter high alarm limit
            </summary>
            <param name="i_iSlot">The slot index.</param>
            <param name="i_iChannel">The channel index.</param>
            <param name="i_lLimit">The alarm limit value.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.SetHighLimit(System.Int32,System.Single)">
            <summary>
            Support module: ADAM-6015, ADAM-6017, ADAM-6018.
            Set analog input high alarm limit
            </summary>
            <param name="i_iChannel">The channel index.</param>
            <param name="i_fLimit">The alarm limit value.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetLowLimit(System.Int32,System.Int32,System.Single@)">
            <summary>
            Support module: ADAM-5013, ADAM-5017, ADAM-5017H, ADAM-5017UH, ADAM-5018, ADAM-5018P.
            Get analog input low alarm limit
            </summary>
            <param name="i_iSlot">The slot index.</param>
            <param name="i_iChannel">The channel index.</param>
            <param name="o_fLimit">The alarm limit value.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetLowLimit(System.Int32,System.Int32,System.Int64@)">
            <summary>
            Support module: ADAM-5080.
            Get counter low alarm limit
            </summary>
            <param name="i_iSlot">The slot index.</param>
            <param name="i_iChannel">The channel index.</param>
            <param name="o_lLimit">The alarm limit value.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetLowLimit(System.Int32,System.Single@)">
            <summary>
            Support module: ADAM-6015, ADAM-6017, ADAM-6018.
            Get analog input low alarm limit
            </summary>
            <param name="i_iChannel">The channel index.</param>
            <param name="o_fLimit">The alarm limit value.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.SetLowLimit(System.Int32,System.Int32,System.Single)">
            <summary>
            Support module: ADAM-5013, ADAM-5017, ADAM-5017H, ADAM-5017UH, ADAM-5018, ADAM-5018P.
            Set analog input low alarm limit
            </summary>
            <param name="i_iSlot">The slot index.</param>
            <param name="i_iChannel">The channel index.</param>
            <param name="i_fLimit">The alarm limit value.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.SetLowLimit(System.Int32,System.Int32,System.Int64)">
            <summary>
            Support module: ADAM-5080.
            Set counter low alarm limit
            </summary>
            <param name="i_iSlot">The slot index.</param>
            <param name="i_iChannel">The channel index.</param>
            <param name="i_lLimit">The alarm limit value.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.SetLowLimit(System.Int32,System.Single)">
            <summary>
            Support module: ADAM-6015, ADAM-6017, ADAM-6018.
            Set analog input low alarm limit
            </summary>
            <param name="i_iChannel">The channel index.</param>
            <param name="i_fLimit">The alarm limit value.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetStatus(System.Int32,System.Int32,System.Boolean@,System.Boolean@)">
            <summary>
            Support module: ADAM-5013, ADAM-5017, ADAM-5017H, ADAM-5017UH, ADAM-5018, ADAM-5018P, ADAM-5080.
            Get the alarm status
            </summary>
            <param name="i_iSlot">The slot index.</param>
            <param name="i_iChannel">The channel index.</param>
            <param name="o_bHigh">The high alarm status</param>
            <param name="o_bLow">The low alarm status</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetStatus(System.Int32,System.Boolean@,System.Boolean@)">
            <summary>
            Support module: ADAM-6015, ADAM-6017, ADAM-6018.
            Get the alarm status
            </summary>
            <param name="i_iChannel">The channel index.</param>
            <param name="o_bHigh">The high alarm status</param>
            <param name="o_bLow">The low alarm status</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetHighMapping(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Support module: ADAM-5013, ADAM-5017, ADAM-5017H, ADAM-5017UH, ADAM-5018, ADAM-5018P, ADAM-5080.
            Get digital output slot and channel that the high alarm maps to.
            </summary>
            <param name="i_iSlot">The slot index.</param>
            <param name="i_iChannel">The channel index.</param>
            <param name="o_iSlot">The mapped digital output slot. If there is no mapping, this value will be -1.</param>
            <param name="o_iChannel">The mapped digital output channel. If there is no mapping, this value will be -1.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetHighMapping(System.Int32,System.Int32@)">
            <summary>
            Support module: ADAM-6017, ADAM-6018.
            Get digital output slot and channel that the high alarm maps to.
            </summary>
            <param name="i_iChannel">The channel index.</param>
            <param name="o_iChannel">The mapped digital output channel. If there is no mapping, this value will be -1.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.SetHighMapping(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Support module: ADAM-5013, ADAM-5017, ADAM-5017H, ADAM-5017UH, ADAM-5018, ADAM-5018P, ADAM-5080.
            Set digital output slot and channel that the high alarm maps to.
            </summary>
            <param name="i_iSlot">The slot index.</param>
            <param name="i_iChannel">The channel index.</param>
            <param name="i_iSlotMap">The mapped digital output slot. 
            If the mapping is going to be disable, set this value to -1.</param>
            <param name="i_iChMap">The mapped digital output channel.
            If the mapping is going to be disable, set this value to -1.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.SetHighMapping(System.Int32,System.Int32)">
            <summary>
            Support module: ADAM-6017, ADAM-6018.
            Set digital output slot and channel that the high alarm maps to.
            </summary>
            <param name="i_iChannel">The channel index.</param>
            <param name="i_iChMap">The mapped digital output channel.
            If the mapping is going to be disable, set this value to -1.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetLowMapping(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Support module: ADAM-5013, ADAM-5017, ADAM-5017H, ADAM-5017UH, ADAM-5018, ADAM-5018P, ADAM-5080.
            Get digital output slot and channel that the low alarm maps to.
            </summary>
            <param name="i_iSlot">The slot index.</param>
            <param name="i_iChannel">The channel index.</param>
            <param name="o_iSlot">The mapped digital output slot. If there is no mapping, this value will be -1.</param>
            <param name="o_iChannel">The mapped digital output channel. If there is no mapping, this value will be -1.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.GetLowMapping(System.Int32,System.Int32@)">
            <summary>
            Support module: ADAM-6017, ADAM-6018.
            Get digital output slot and channel that the low alarm maps to.
            </summary>
            <param name="i_iChannel">The channel index.</param>
            <param name="o_iChannel">The mapped digital output channel. If there is no mapping, this value will be -1.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.SetLowMapping(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Support module: ADAM-5013, ADAM-5017, ADAM-5017H, ADAM-5017UH, ADAM-5018, ADAM-5018P, ADAM-5080.
            Set digital output slot and channel that the low alarm maps to.
            </summary>
            <param name="i_iSlot">The slot index.</param>
            <param name="i_iChannel">The channel index.</param>
            <param name="i_iSlotMap">The mapped digital output slot. 
            If the mapping is going to be disable, set this value as well as 'i_iChMap' to -1.</param>
            <param name="i_iChMap">The mapped digital output channel.
            If the mapping is going to be disable, set this value as well as 'i_iSlotMap' to -1.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.SetLowMapping(System.Int32,System.Int32)">
            <summary>
            Support module: ADAM-6017, ADAM-6018.
            Set digital output slot and channel that the low alarm maps to.
            </summary>
            <param name="i_iChannel">The channel index.</param>
            <param name="i_iChMap">The mapped digital output channel.
            If the mapping is going to be disable, set this value as well as 'i_iSlotMap' to -1.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.SetHighLatchClear(System.Int32,System.Int32)">
            <summary>
            Support module: ADAM-5013, ADAM-5017, ADAM-5017H, ADAM-5017UH, ADAM-5018, ADAM-5018P, ADAM-5080.
            Set the high latch alarm to be cleared
            </summary>
            <param name="i_iSlot">The slot index.</param>
            <param name="i_iChannel">The channel index.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.SetHighLatchClear(System.Int32)">
            <summary>
            Support module: ADAM-6015, ADAM-6017, ADAM-6018.
            Set the high latch alarm to be cleared
            </summary>
            <param name="i_iChannel">The channel index.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.SetLowLatchClear(System.Int32,System.Int32)">
            <summary>
            Support module: ADAM-5013, ADAM-5017, ADAM-5017H, ADAM-5017UH, ADAM-5018, ADAM-5018P, ADAM-5080.
            Set the low latch alarm to be cleared
            </summary>
            <param name="i_iSlot">The slot index.</param>
            <param name="i_iChannel">The channel index.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.Alarm.SetLowLatchClear(System.Int32)">
            <summary>
            Support module: ADAM-6015, ADAM-6017, ADAM-6018.
            Set the low latch alarm to be cleared
            </summary>
            <param name="i_iChannel">The channel index.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="T:Advantech.Adam.Adam4000_ChannelStatus">
            <summary>
            The data format for analog input.
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000_ChannelStatus.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000_ChannelStatus.Over">
            <summary>
            Over range
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000_ChannelStatus.Under">
            <summary>
            Under range
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000_ChannelStatus.Burn">
            <summary>
            Burn out
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000_ChannelStatus.Disable">
            <summary>
            Disabled
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam4000_DataFormat">
            <summary>
            The data format for analog input.
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000_DataFormat.EngineerUnit">
            <summary>
            Engineering unit
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000_DataFormat.Percent">
            <summary>
            Percent pf FSR
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000_DataFormat.TwosComplementHex">
            <summary>
            Two's complement hexdecimal
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000_DataFormat.Ohms">
            <summary>
            Ohms (ADAM-4013)
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000_DataFormat.Unknown">
            <summary>
            Unknown data format
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam5000_DataFormat">
            <summary>
            The data format for analog input.
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5000_DataFormat.EngineerUnit">
            <summary>
            Engineering unit
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5000_DataFormat.Percent">
            <summary>
            Percent pf FSR
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5000_DataFormat.TwosComplementHex">
            <summary>
            Two's complement hexdecimal
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5000_DataFormat.Ohms">
            <summary>
            Ohms (ADAM-5013)
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5000_DataFormat.Unknown">
            <summary>
            Unknown data format
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam4000_Integration">
            <summary>
            The integration code for ADAM-4000
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000_Integration.Hz60_50ms">
            <summary>
            60 Hz
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000_Integration.Hz50_60ms">
            <summary>
            50 Hz
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000_Integration.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam5000_Integration">
            <summary>
            The integration code for ADAM-5000
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5000_Integration.Hz60_50ms">
            <summary>
            60 Hz
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5000_Integration.Hz50_60ms">
            <summary>
            50 Hz
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5000_Integration.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam5000TCP_Integration">
            <summary>
            The integration code for ADAM-5000TCP
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5000TCP_Integration.Hz60_50ms">
            <summary>
            60 Hz
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5000TCP_Integration.Hz50_60ms">
            <summary>
            50 Hz
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5000TCP_Integration.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam6000_Integration">
            <summary>
            The integration code for ADAM-6000
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6000_Integration.Hz60_50ms">
            <summary>
            60 Hz
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6000_Integration.Hz50_60ms">
            <summary>
            50 Hz
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6000_Integration.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam4011_InputRange">
            <summary>
            Adam-4011 input range code
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4011_InputRange.mV_Neg15To15">
            <summary>
            +/- 15 mV 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4011_InputRange.mV_Neg50To50">
            <summary>
             +/- 50 mV
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4011_InputRange.mV_Neg100To100">
            <summary>
              +/- 100 mV
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4011_InputRange.mV_Neg500To500">
            <summary>
            +/- 500 mV
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4011_InputRange.V_Neg1To1">
            <summary>
            +/- 1 V
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4011_InputRange.V_Neg2AndHalfTo2AndHalf">
            <summary>
            +/- 2.5 V
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4011_InputRange.mA_Neg20To20">
            <summary>
            +/- 20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4011_InputRange.Jtype_0To760C">
            <summary>
            T/C J type 0~760 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4011_InputRange.Ktype_0To1370C">
            <summary>
            T/C K type 0~1370 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4011_InputRange.Ttype_Neg100To400C">
            <summary>
            T/C T type -100~400 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4011_InputRange.Etype_0To1000C">
            <summary>
            T/C E type 0~1000 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4011_InputRange.Rtype_500To1750C">
            <summary>
            T/C R type 500~1750 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4011_InputRange.Stype_500To1750C">
            <summary>
            T/C S type 500~1750 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4011_InputRange.Btype_500To1800C">
            <summary>
            T/C B type 500~1800 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4011_InputRange.Unknown">
            <summary>
            Unknown range
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam4012_InputRange">
            <summary>
            Adam-4012 input range code 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4012_InputRange.V_Neg10To10">
            <summary>
            +/- 10 V 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4012_InputRange.V_Neg5To5">
            <summary>
             +/- 5 V
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4012_InputRange.V_Neg1To1">
            <summary>
              +/- 1 V
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4012_InputRange.mV_Neg500To500">
            <summary>
            +/- 500 mV
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4012_InputRange.mV_Neg150To150">
            <summary>
            +/- 150 mV
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4012_InputRange.mA_Neg20To20">
            <summary>
            +/- 20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4012_InputRange.Unknown">
            <summary>
            Unknown range
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam4013_InputRange">
            <summary>
            Adam-4013 input range code
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4013_InputRange.Pt385_Neg100To100">
            <summary>
            Pt385 -100~100 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4013_InputRange.Pt385_0To100">
            <summary>
            Pt385 0~100 'C 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4013_InputRange.Pt385_0To200">
            <summary>
             Pt385 0~200 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4013_InputRange.Pt385_0To600">
            <summary>
             Pt385 0~600 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4013_InputRange.Pt392_Neg100To100">
            <summary>
            Pt392 -100~100 'C 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4013_InputRange.Pt392_0To100">
            <summary>
             Pt392 0~100 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4013_InputRange.Pt392_0To200">
            <summary>
              Pt392 0~200 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4013_InputRange.Pt392_0To600">
            <summary>
              Pt392 0~600 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4013_InputRange.Ni518_Neg80To100">
            <summary>
            Ni518 -80~100 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4013_InputRange.Ni518_0To100">
            <summary>
            Ni518 0~100 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4013_InputRange.Unknown">
            <summary>
            Unknown range
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam4015_InputRange">
            <summary>
            Adam-4015 input range code
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4015_InputRange.Pt385_Neg50To150">
            <summary>
            Pt385 -50~150 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4015_InputRange.Pt385_0To100">
            <summary>
            Pt385 0~100 'C 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4015_InputRange.Pt385_0To200">
            <summary>
             Pt385 0~200 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4015_InputRange.Pt385_0To400">
            <summary>
             Pt385 0~400 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4015_InputRange.Pt385_Neg200To200">
            <summary>
            Pt385 -200~200 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4015_InputRange.Pt392_Neg50To150">
            <summary>
            Pt392 -50~150 'C 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4015_InputRange.Pt392_0To100">
            <summary>
             Pt392 0~100 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4015_InputRange.Pt392_0To200">
            <summary>
              Pt392 0~200 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4015_InputRange.Pt392_0To400">
            <summary>
              Pt392 0~400 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4015_InputRange.Pt392_Neg200To200">
            <summary>
            Pt392 -200~200 'C 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4015_InputRange.Pt1000_Neg40To160">
            <summary>
            Pt1000 -40~160 'C 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4015_InputRange.Balcon500_Neg30To120">
            <summary>
            Balcon500 -30~120 'C 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4015_InputRange.Ni518_Neg80To100">
            <summary>
            Ni518 -80~100 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4015_InputRange.Ni518_0To100">
            <summary>
            Ni518 0~100 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4015_InputRange.Ni508_0To100">
            <summary>
            Ni508 0~100 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4015_InputRange.Ni508_Neg50To200">
            <summary>
            Ni508 -50~200 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4015_InputRange.Unknown">
            <summary>
            Unknown range
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam4015T_InputRange">
            <summary>
            Adam-4015T input range code
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4015T_InputRange.Thermistor_3K_0To100">
            <summary>
            Thermistor 3K 0~100 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4015T_InputRange.Thermistor_10K_0To100">
            <summary>
            Thermistor 10K 0~100 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4015T_InputRange.Unknown">
            <summary>
            Unknown range
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam4016_InputRange">
            <summary>
            Adam-4016 input range code
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4016_InputRange.mV_Neg15To15">
            <summary>
            +/- 15 mV 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4016_InputRange.mV_Neg50To50">
            <summary>
             +/- 50 mV
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4016_InputRange.mV_Neg100To100">
            <summary>
              +/- 100 mV
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4016_InputRange.mV_Neg500To500">
            <summary>
            +/- 500 mV
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4016_InputRange.mA_Neg20To20">
            <summary>
            +/- 20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4016_InputRange.Unknown">
            <summary>
            Unknown range
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam4017_InputRange">
            <summary>
            Adam-4017 input range code 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4017_InputRange.V_Neg10To10">
            <summary>
            +/- 10 V 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4017_InputRange.V_Neg5To5">
            <summary>
             +/- 5 V
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4017_InputRange.V_Neg1To1">
            <summary>
              +/- 1 V
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4017_InputRange.mV_Neg500To500">
            <summary>
            +/- 500 mV
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4017_InputRange.mV_Neg150To150">
            <summary>
            +/- 150 mV
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4017_InputRange.mA_Neg20To20">
            <summary>
            +/- 20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4017_InputRange.Unknown">
            <summary>
            Unknown range
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam4017P_InputRange">
            <summary>
            Adam-4017P input range code 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4017P_InputRange.mA_4To20">
            <summary>
            4~20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4017P_InputRange.V_Neg10To10">
            <summary>
            +/- 10 V 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4017P_InputRange.V_Neg5To5">
            <summary>
             +/- 5 V
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4017P_InputRange.V_Neg1To1">
            <summary>
              +/- 1 V
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4017P_InputRange.mV_Neg500To500">
            <summary>
            +/- 500 mV
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4017P_InputRange.mV_Neg150To150">
            <summary>
            +/- 150 mV
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4017P_InputRange.mA_0To20">
            <summary>
            0~20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4017P_InputRange.Unknown">
            <summary>
            Unknown range
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam4018_InputRange">
            <summary>
            Adam-4018 input range code
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018_InputRange.mV_Neg15To15">
            <summary>
            +/- 15 mV 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018_InputRange.mV_Neg50To50">
            <summary>
             +/- 50 mV
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018_InputRange.mV_Neg100To100">
            <summary>
              +/- 100 mV
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018_InputRange.mV_Neg500To500">
            <summary>
            +/- 500 mV
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018_InputRange.V_Neg1To1">
            <summary>
            +/- 1 V
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018_InputRange.V_Neg2AndHalfTo2AndHalf">
            <summary>
            +/- 2.5 V
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018_InputRange.mA_Neg20To20">
            <summary>
            +/- 20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018_InputRange.Jtype_0To760C">
            <summary>
            T/C J type 0~760 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018_InputRange.Ktype_0To1370C">
            <summary>
            T/C K type 0~1370 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018_InputRange.Ttype_Neg100To400C">
            <summary>
            T/C T type -100~400 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018_InputRange.Etype_0To1000C">
            <summary>
            T/C E type 0~1000 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018_InputRange.Rtype_500To1750C">
            <summary>
            T/C R type 500~1750 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018_InputRange.Stype_500To1750C">
            <summary>
            T/C S type 500~1750 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018_InputRange.Btype_500To1800C">
            <summary>
            T/C B type 500~1800 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018_InputRange.Unknown">
            <summary>
            Unknown range
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam4018P_InputRange">
            <summary>
            Adam-4018P input range code
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018P_InputRange.mA_0To20">
            <summary>
            0~20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018P_InputRange.mA_4To20">
            <summary>
            4~20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018P_InputRange.Jtype_0To760C">
            <summary>
            T/C J type 0~760 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018P_InputRange.Ktype_0To1370C">
            <summary>
            T/C K type 0~1370 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018P_InputRange.Ttype_Neg100To400C">
            <summary>
            T/C T type -100~400 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018P_InputRange.Etype_0To1000C">
            <summary>
            T/C E type 0~1000 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018P_InputRange.Rtype_500To1750C">
            <summary>
            T/C R type 500~1750 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018P_InputRange.Stype_500To1750C">
            <summary>
            T/C S type 500~1750 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018P_InputRange.Btype_500To1800C">
            <summary>
            T/C B type 500~1800 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018P_InputRange.Unknown">
            <summary>
            Unknown range
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam4018M_InputRange">
            <summary>
            Adam-4018M input range code
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018M_InputRange.mV_Neg15To15">
            <summary>
            +/- 15 mV 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018M_InputRange.mV_Neg50To50">
            <summary>
             +/- 50 mV
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018M_InputRange.mV_Neg100To100">
            <summary>
              +/- 100 mV
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018M_InputRange.mV_Neg500To500">
            <summary>
            +/- 500 mV
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018M_InputRange.V_Neg1To1">
            <summary>
            +/- 1 V
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018M_InputRange.V_Neg2AndHalfTo2AndHalf">
            <summary>
            +/- 2.5 V
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018M_InputRange.mA_Neg20To20">
            <summary>
            +/- 20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018M_InputRange.Jtype_0To760C">
            <summary>
            T/C J type 0~760 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018M_InputRange.Ktype_0To1370C">
            <summary>
            T/C K type 0~1370 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018M_InputRange.Ttype_Neg100To400C">
            <summary>
            T/C T type -100~400 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018M_InputRange.Etype_0To1000C">
            <summary>
            T/C E type 0~1000 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018M_InputRange.Rtype_500To1750C">
            <summary>
            T/C R type 500~1750 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018M_InputRange.Stype_500To1750C">
            <summary>
            T/C S type 500~1750 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018M_InputRange.Btype_500To1800C">
            <summary>
            T/C B type 500~1800 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4018M_InputRange.Unknown">
            <summary>
            Unknown range
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam4019_InputRange">
            <summary>
            Adam-4019 input range code
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4019_InputRange.mV_Neg100To100">
            <summary>
              +/- 100 mV
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4019_InputRange.mV_Neg500To500">
            <summary>
            +/- 500 mV
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4019_InputRange.V_Neg1To1">
            <summary>
            +/- 1 V
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4019_InputRange.V_Neg2AndHalfTo2AndHalf">
            <summary>
            +/- 2.5 V
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4019_InputRange.V_Neg10To10">
            <summary>
            +/- 10 V 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4019_InputRange.V_Neg5To5">
            <summary>
             +/- 5 V
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4019_InputRange.mA_Neg20To20">
            <summary>
            +/- 20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4019_InputRange.Jtype_0To760C">
            <summary>
            T/C J type 0~760 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4019_InputRange.Ktype_0To1370C">
            <summary>
            T/C K type 0~1370 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4019_InputRange.Ttype_Neg100To400C">
            <summary>
            T/C T type -100~400 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4019_InputRange.Etype_0To1000C">
            <summary>
            T/C E type 0~1000 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4019_InputRange.Rtype_500To1750C">
            <summary>
            T/C R type 500~1750 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4019_InputRange.Stype_500To1750C">
            <summary>
            T/C S type 500~1750 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4019_InputRange.Btype_500To1800C">
            <summary>
            T/C B type 500~1800 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4019_InputRange.Unknown">
            <summary>
            Unknown range
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam4019P_InputRange">
            <summary>
            Adam-4019P input range code
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4019P_InputRange.mV_Neg100To100">
            <summary>
              +/- 100 mV
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4019P_InputRange.mV_Neg500To500">
            <summary>
            +/- 500 mV
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4019P_InputRange.V_Neg1To1">
            <summary>
            +/- 1 V
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4019P_InputRange.V_Neg2AndHalfTo2AndHalf">
            <summary>
            +/- 2.5 V
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4019P_InputRange.mA_4To20">
            <summary>
            4~20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4019P_InputRange.V_Neg10To10">
            <summary>
            +/- 10 V 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4019P_InputRange.V_Neg5To5">
            <summary>
             +/- 5 V
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4019P_InputRange.mA_Neg20To20">
            <summary>
            +/- 20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4019P_InputRange.Jtype_0To760C">
            <summary>
            T/C J type 0~760 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4019P_InputRange.Ktype_0To1370C">
            <summary>
            T/C K type 0~1370 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4019P_InputRange.Ttype_Neg100To400C">
            <summary>
            T/C T type -100~400 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4019P_InputRange.Etype_0To1000C">
            <summary>
            T/C E type 0~1000 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4019P_InputRange.Rtype_500To1750C">
            <summary>
            T/C R type 500~1750 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4019P_InputRange.Stype_500To1750C">
            <summary>
            T/C S type 500~1750 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4019P_InputRange.Btype_500To1800C">
            <summary>
            T/C B type 500~1800 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4019P_InputRange.Unknown">
            <summary>
            Unknown range
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam4022T_InputRange">
            <summary>
            Adam-4022T input range code
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4022T_InputRange.mA_4To20">
            <summary>
            4~20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4022T_InputRange.V_0To10">
            <summary>
            0~10 V 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4022T_InputRange.mA_0To20">
            <summary>
            0~20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4022T_InputRange.Pt385_Neg100To100">
            <summary>
            Pt385 -100~100 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4022T_InputRange.Pt385_0To100">
            <summary>
            Pt385 0~100 'C 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4022T_InputRange.Pt385_0To200">
            <summary>
             Pt385 0~200 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4022T_InputRange.Pt385_0To600">
            <summary>
             Pt385 0~600 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4022T_InputRange.Pt392_Neg100To100">
            <summary>
            Pt392 -100~100 'C 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4022T_InputRange.Pt392_0To100">
            <summary>
             Pt392 0~100 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4022T_InputRange.Pt392_0To200">
            <summary>
              Pt392 0~200 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4022T_InputRange.Pt392_0To600">
            <summary>
              Pt392 0~600 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4022T_InputRange.Pt1000_Neg40To160">
            <summary>
            Pt1000 -40~160 'C 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4022T_InputRange.Thermistor_3K_0To100">
            <summary>
            Thermistor 3K 0~100 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4022T_InputRange.Thermistor_10K_0To100">
            <summary>
            Thermistor 10K 0~100 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4022T_InputRange.Unknown">
            <summary>
            Unknown range
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam5013_InputRange">
            <summary>
            Adam-5013 input range code
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5013_InputRange.Pt385_Neg100To100">
            <summary>
            Pt385 -100~100 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5013_InputRange.Pt385_0To100">
            <summary>
            Pt385 0~100 'C 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5013_InputRange.Pt385_0To200">
            <summary>
             Pt385 0~200 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5013_InputRange.Pt385_0To600">
            <summary>
             Pt385 0~600 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5013_InputRange.Pt392_Neg100To100">
            <summary>
            Pt392 -100~100 'C 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5013_InputRange.Pt392_0To100">
            <summary>
             Pt392 0~100 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5013_InputRange.Pt392_0To200">
            <summary>
              Pt392 0~200 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5013_InputRange.Pt392_0To600">
            <summary>
              Pt392 0~600 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5013_InputRange.Ni518_Neg80To100">
            <summary>
            Ni518 -80~100 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5013_InputRange.Ni518_0To100">
            <summary>
            Ni518 0~100 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5013_InputRange.Unknown">
            <summary>
            Unknown range
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam5017_InputRange">
            <summary>
            Adam-5017 input range code 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5017_InputRange.mA_4To20">
            <summary>
            4~20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5017_InputRange.V_Neg10To10">
            <summary>
            +/- 10 V 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5017_InputRange.V_Neg5To5">
            <summary>
             +/- 5 V
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5017_InputRange.V_Neg1To1">
            <summary>
              +/- 1 V
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5017_InputRange.mV_Neg500To500">
            <summary>
            +/- 500 mV
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5017_InputRange.mV_Neg150To150">
            <summary>
            +/- 150 mV
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5017_InputRange.mA_Neg20To20">
            <summary>
            +/- 20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5017_InputRange.Unknown">
            <summary>
            Unknown range
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam5017H_InputRange">
            <summary>
            Adam-5017H input range code
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5017H_InputRange.V_Neg10To10">
            <summary>
            +/- 10 V 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5017H_InputRange.V_0To10">
            <summary>
            0~10 V 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5017H_InputRange.V_Neg5To5">
            <summary>
            +/- 5 V 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5017H_InputRange.V_0To5">
            <summary>
            0~5 V 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5017H_InputRange.V_Neg2AndHalfTo2AndHalf">
            <summary>
            +/- 2.5 V
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5017H_InputRange.V_0To2AndHalf">
            <summary>
            0~2.5 V
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5017H_InputRange.V_Neg1To1">
            <summary>
            +/- 1 V 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5017H_InputRange.V_0To1">
            <summary>
            0~1 V 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5017H_InputRange.mV_Neg500To500">
            <summary>
            +/- 500 mV 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5017H_InputRange.mV_0To500">
            <summary>
            0~500 mV 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5017H_InputRange.mA_4To20">
            <summary>
            4~20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5017H_InputRange.mA_0To20">
            <summary>
            0~20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5017H_InputRange.Unknown">
            <summary>
            Unknown range
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam5017UH_InputRange">
            <summary>
            Adam-5017UH input range code
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5017UH_InputRange.mA_4To20">
            <summary>
            4~20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5017UH_InputRange.V_Neg10To10">
            <summary>
            +/- 10 V 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5017UH_InputRange.mV_0To500">
            <summary>
            0~500 mV 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5017UH_InputRange.mA_0To20">
            <summary>
            0~20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5017UH_InputRange.V_0To10">
            <summary>
            0~10 V 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5017UH_InputRange.Unknown">
            <summary>
            Unknown range
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam5018_InputRange">
            <summary>
            Adam-5018 input range code
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5018_InputRange.mV_Neg15To15">
            <summary>
            +/- 15 mV 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5018_InputRange.mV_Neg50To50">
            <summary>
             +/- 50 mV
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5018_InputRange.mV_Neg100To100">
            <summary>
              +/- 100 mV
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5018_InputRange.mV_Neg500To500">
            <summary>
            +/- 500 mV
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5018_InputRange.V_Neg1To1">
            <summary>
            +/- 1 V
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5018_InputRange.V_Neg2AndHalfTo2AndHalf">
            <summary>
            +/- 2.5 V
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5018_InputRange.mA_Neg20To20">
            <summary>
            +/- 20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5018_InputRange.Jtype_0To760C">
            <summary>
            T/C J type 0~760 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5018_InputRange.Ktype_0To1370C">
            <summary>
            T/C K type 0~1370 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5018_InputRange.Ttype_Neg100To400C">
            <summary>
            T/C T type -100~400 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5018_InputRange.Etype_0To1000C">
            <summary>
            T/C E type 0~1000 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5018_InputRange.Rtype_500To1750C">
            <summary>
            T/C R type 500~1750 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5018_InputRange.Stype_500To1750C">
            <summary>
            T/C S type 500~1750 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5018_InputRange.Btype_500To1800C">
            <summary>
            T/C B type 500~1800 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5018_InputRange.Unknown">
            <summary>
            Unknown range
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam5018P_InputRange">
            <summary>
            Adam-5018P input range code
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5018P_InputRange.mV_Neg15To15">
            <summary>
            +/- 15 mV 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5018P_InputRange.mV_Neg50To50">
            <summary>
             +/- 50 mV
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5018P_InputRange.mV_Neg100To100">
            <summary>
              +/- 100 mV
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5018P_InputRange.mV_Neg500To500">
            <summary>
            +/- 500 mV
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5018P_InputRange.V_Neg1To1">
            <summary>
            +/- 1 V
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5018P_InputRange.V_Neg2AndHalfTo2AndHalf">
            <summary>
            +/- 2.5 V
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5018P_InputRange.mA_Neg20To20">
            <summary>
            +/- 20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5018P_InputRange.mA_4To20">
            <summary>
            4~20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5018P_InputRange.Jtype_0To760C">
            <summary>
            T/C J type 0~760 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5018P_InputRange.Ktype_0To1370C">
            <summary>
            T/C K type 0~1370 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5018P_InputRange.Ttype_Neg100To400C">
            <summary>
            T/C T type -100~400 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5018P_InputRange.Etype_0To1000C">
            <summary>
            T/C E type 0~1000 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5018P_InputRange.Rtype_500To1750C">
            <summary>
            T/C R type 500~1750 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5018P_InputRange.Stype_500To1750C">
            <summary>
            T/C S type 500~1750 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5018P_InputRange.Btype_500To1800C">
            <summary>
            T/C B type 500~1800 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5018P_InputRange.Unknown">
            <summary>
            Unknown range
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam6015_InputRange">
            <summary>
            Adam-6015 input range code
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6015_InputRange.Pt385_Neg50To150">
            <summary>
            Pt385 -50~150 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6015_InputRange.Pt385_0To100">
            <summary>
            Pt385 0~100 'C 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6015_InputRange.Pt385_0To200">
            <summary>
             Pt385 0~200 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6015_InputRange.Pt385_0To400">
            <summary>
             Pt385 0~400 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6015_InputRange.Pt385_Neg200To200">
            <summary>
            Pt385 -200~200 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6015_InputRange.Pt392_Neg50To150">
            <summary>
            Pt392 -50~150 'C 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6015_InputRange.Pt392_0To100">
            <summary>
             Pt392 0~100 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6015_InputRange.Pt392_0To200">
            <summary>
              Pt392 0~200 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6015_InputRange.Pt392_0To400">
            <summary>
              Pt392 0~400 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6015_InputRange.Pt392_Neg200To200">
            <summary>
            Pt392 -200~200 'C 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6015_InputRange.Pt1000_Neg40To160">
            <summary>
            Pt1000 -40~160 'C 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6015_InputRange.Balcon500_Neg30To120">
            <summary>
            Balcon500 -30~120 'C 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6015_InputRange.Ni518_Neg80To100">
            <summary>
            Ni518 -80~100 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6015_InputRange.Ni518_0To100">
            <summary>
            Ni518 0~100 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6015_InputRange.Unknown">
            <summary>
            Unknown range
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam6017_InputRange">
            <summary>
            Adam-6017 input range code 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6017_InputRange.mA_4To20">
            <summary>
            4~20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6017_InputRange.V_Neg10To10">
            <summary>
            +/- 10 V 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6017_InputRange.V_Neg5To5">
            <summary>
             +/- 5 V
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6017_InputRange.V_Neg1To1">
            <summary>
              +/- 1 V
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6017_InputRange.mV_Neg500To500">
            <summary>
            +/- 500 mV
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6017_InputRange.mV_Neg150To150">
            <summary>
            +/- 150 mV
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6017_InputRange.mA_0To20">
            <summary>
            0~20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6017_InputRange.Unknown">
            <summary>
            Unknown range
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam6018_InputRange">
            <summary>
            Adam-6018 input range code
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6018_InputRange.Jtype_0To760C">
            <summary>
            T/C J type 0~760 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6018_InputRange.Ktype_0To1370C">
            <summary>
            T/C K type 0~1370 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6018_InputRange.Ttype_Neg100To400C">
            <summary>
            T/C T type -100~400 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6018_InputRange.Etype_0To1000C">
            <summary>
            T/C E type 0~1000 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6018_InputRange.Rtype_500To1750C">
            <summary>
            T/C R type 500~1750 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6018_InputRange.Stype_500To1750C">
            <summary>
            T/C S type 500~1750 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6018_InputRange.Btype_500To1800C">
            <summary>
            T/C B type 500~1800 'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6018_InputRange.Unknown">
            <summary>
            Unknown range
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam6022_InputRange">
            <summary>
            Adam-6022 input range code
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6022_InputRange.mA_4To20">
            <summary>
            4~20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6022_InputRange.V_Neg10To10">
            <summary>
            +/- 10 V 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6022_InputRange.mA_0To20">
            <summary>
            0~20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6022_InputRange.Unknown">
            <summary>
            Unknown range
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam6024_InputRange">
            <summary>
            Adam-6024 input range code
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6024_InputRange.mA_4To20">
            <summary>
            4~20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6024_InputRange.V_Neg10To10">
            <summary>
            +/- 10 V 
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6024_InputRange.mA_0To20">
            <summary>
            0~20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6024_InputRange.Unknown">
            <summary>
            Unknown range
            </summary>
        </member>
        <member name="T:Advantech.Adam.AnalogInput">
            <summary>
            AnalogInput class for ADAM series.
            </summary>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.#ctor(Advantech.Adam.AdamCom)">
            <summary>
            The AnalogInput constructor.
            </summary>
            <param name="i_com">The AdamCom object.</param>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.#ctor(Advantech.Adam.AdamSocket)">
            <summary>
            The AnalogInput constructor.
            </summary>
            <param name="i_socket">The AdamSocket object.</param>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4011RangeCode(System.Int32)">
            <summary>
            Get the ADAM-4011 range code.
            </summary>
            <param name="i_iIndex">The range code index. The value is between 0~13.</param>
            <returns>The range code.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4011RangeIndex(System.Byte)">
            <summary>
            Get the ADAM-4011 range code index
            </summary>
            <param name="i_byRange">The range code</param>
            <returns>The range index, base-0. If the range is not defined, then return -1.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4011RangeName(System.Byte)">
            <summary>
            Get the ADAM-4011 range name.
            </summary>
            <param name="i_byRange">The range code.</param>
            <returns>The range name.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4012RangeCode(System.Int32)">
            <summary>
            Get the ADAM-4012 range code.
            </summary>
            <param name="i_iIndex">The range code index. The value is between 0~5.</param>
            <returns>The range code.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4012RangeIndex(System.Byte)">
            <summary>
            Get the ADAM-4012 range code index
            </summary>
            <param name="i_byRange">The range code</param>
            <returns>The range index, base-0. If the range is not defined, then return -1.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4012RangeName(System.Byte)">
            <summary>
            Get the ADAM-4012 range name.
            </summary>
            <param name="i_byRange">The range code.</param>
            <returns>The range name.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4013RangeCode(System.Int32)">
            <summary>
            Get the ADAM-4013 range code.
            </summary>
            <param name="i_iIndex">The range code index. The value is between 0~9.</param>
            <returns>The range code.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4013RangeIndex(System.Byte)">
            <summary>
            Get the ADAM-4013 range code index
            </summary>
            <param name="i_byRange">The range code</param>
            <returns>The range index, base-0. If the range is not defined, then return -1.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4013RangeName(System.Byte)">
            <summary>
            Get the ADAM-4013 range name.
            </summary>
            <param name="i_byRange">The range code.</param>
            <returns>The range name.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4015RangeCode(System.Int32)">
            <summary>
            
            </summary>
            <param name="i_iIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4015RangeIndex(System.Byte)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4015RangeName(System.Byte)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4015ScaledValue(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <param name="i_iValue"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4015TRangeCode(System.Int32)">
            <summary>
            
            </summary>
            <param name="i_iIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4015TRangeIndex(System.Byte)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4015TRangeName(System.Byte)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4015TScaledValue(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <param name="i_iValue"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4016RangeCode(System.Int32)">
            <summary>
            Get the ADAM-4016 range code.
            </summary>
            <param name="i_iIndex">The range code index. The value is between 0~4.</param>
            <returns>The range code.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4016RangeIndex(System.Byte)">
            <summary>
            Get the ADAM-4016 range code index
            </summary>
            <param name="i_byRange">The range code</param>
            <returns>The range index, base-0. If the range is not defined, then return -1.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4016RangeName(System.Byte)">
            <summary>
            Get the ADAM-4016 range name.
            </summary>
            <param name="i_byRange">The range code.</param>
            <returns>The range name.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4017RangeCode(System.Int32)">
            <summary>
            Get the ADAM-4017 range code.
            </summary>
            <param name="i_iIndex">The range code index. The value is between 0~5.</param>
            <returns>The range code.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4017RangeIndex(System.Byte)">
            <summary>
            Get the ADAM-4017 range code index
            </summary>
            <param name="i_byRange">The range code</param>
            <returns>The range index, base-0. If the range is not defined, then return -1.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4017RangeName(System.Byte)">
            <summary>
            Get the ADAM-4017 range name.
            </summary>
            <param name="i_byRange">The range code.</param>
            <returns>The range name.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4017PRangeCode(System.Int32)">
            <summary>
            
            </summary>
            <param name="i_iIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4017PRangeIndex(System.Byte)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4017PRangeName(System.Byte)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4017PScaledValue(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <param name="i_iValue"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4018RangeCode(System.Int32)">
            <summary>
            Get the ADAM-4018 range code.
            </summary>
            <param name="i_iIndex">The range code index. The value is between 0~13.</param>
            <returns>The range code.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4018RangeIndex(System.Byte)">
            <summary>
            Get the ADAM-4018 range code index
            </summary>
            <param name="i_byRange">The range code</param>
            <returns>The range index, base-0. If the range is not defined, then return -1.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4018RangeName(System.Byte)">
            <summary>
            Get the ADAM-4018 range name.
            </summary>
            <param name="i_byRange">The range code.</param>
            <returns>The range name.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4018PRangeCode(System.Int32)">
            <summary>
            
            </summary>
            <param name="i_iIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4018PRangeIndex(System.Byte)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4018PRangeName(System.Byte)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4018PScaledValue(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <param name="i_iValue"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4019RangeCode(System.Int32)">
            <summary>
            Get the ADAM-4019 range code.
            </summary>
            <param name="i_iIndex">The range code index. The value is between 0~13.</param>
            <returns>The range code.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4019RangeIndex(System.Byte)">
            <summary>
            Get the ADAM-4019 range code index
            </summary>
            <param name="i_byRange">The range code</param>
            <returns>The range index, base-0. If the range is not defined, then return -1.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4019RangeName(System.Byte)">
            <summary>
            Get the ADAM-4019 range name.
            </summary>
            <param name="i_byRange">The range code.</param>
            <returns>The range name.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4019PRangeCode(System.Int32)">
            <summary>
            Get the ADAM-4019P range code.
            </summary>
            <param name="i_iIndex">The range code index. The value is between 0~14.</param>
            <returns>The range code.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4019PRangeIndex(System.Byte)">
            <summary>
            Get the ADAM-4019P range code index
            </summary>
            <param name="i_byRange">The range code</param>
            <returns>The range index, base-0. If the range is not defined, then return -1.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4019PRangeName(System.Byte)">
            <summary>
            Get the ADAM-4019P range name.
            </summary>
            <param name="i_byRange">The range code.</param>
            <returns>The range name.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4019PScaledValue(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <param name="i_iValue"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4022TRangeCode(System.Int32)">
            <summary>
            Get the ADAM-4022T range code.
            </summary>
            <param name="i_iIndex">The range code index. The value is between 0~13.</param>
            <returns>The range code.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4022TRangeIndex(System.Byte)">
            <summary>
            Get the ADAM-4022T range code index
            </summary>
            <param name="i_byRange">The range code</param>
            <returns>The range index, base-0. If the range is not defined, then return -1.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4022TRangeName(System.Byte)">
            <summary>
            Get the ADAM-4022T range name.
            </summary>
            <param name="i_byRange">The range code.</param>
            <returns>The range name.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam4022TScaledValue(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <param name="i_iValue"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam5013RangeCode(System.Int32)">
            <summary>
            Get the ADAM-5013 range code.
            </summary>
            <param name="i_iIndex">The range code index. The value is between 0~9.</param>
            <returns>The range code.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam5013RangeIndex(System.Byte)">
            <summary>
            Get the ADAM-5013 range code index
            </summary>
            <param name="i_byRange">The range code</param>
            <returns>The range index, base-0. If the range is not defined, then return -1.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam5013RangeName(System.Byte)">
            <summary>
            Get the ADAM-5013 range name.
            </summary>
            <param name="i_byRange">The range code.</param>
            <returns>The range name.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam5013ScaledValue(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <param name="i_iValue"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam5017RangeCode(System.Int32)">
            <summary>
            Get the ADAM-5017 range code.
            </summary>
            <param name="i_iIndex">The range code index. The value is between 0~6.</param>
            <returns>The range code.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam5017RangeIndex(System.Byte)">
            <summary>
            Get the ADAM-5017 range code index
            </summary>
            <param name="i_byRange">The range code</param>
            <returns>The range index, base-0. If the range is not defined, then return -1.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam5017RangeName(System.Byte)">
            <summary>
            Get the ADAM-5017 range name.
            </summary>
            <param name="i_byRange">The range code.</param>
            <returns>The range name.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam5017ScaledValue(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <param name="i_iValue"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam5017HRangeCode(System.Int32)">
            <summary>
            Get the ADAM-5017H range code.
            </summary>
            <param name="i_iIndex">The range code index. The value is between 0~11.</param>
            <returns>The range code.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam5017HRangeIndex(System.Byte)">
            <summary>
            Get the ADAM-5017H range code index
            </summary>
            <param name="i_byRange">The range code</param>
            <returns>The range index, base-0. If the range is not defined, then return -1.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam5017HRangeName(System.Byte)">
            <summary>
            Get the ADAM-5017H range name.
            </summary>
            <param name="i_byRange">The range code.</param>
            <returns>The range name.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam5017HScaledValue(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <param name="i_iValue"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam5017UHRangeCode(System.Int32)">
            <summary>
            Get the ADAM-5017UH range code.
            </summary>
            <param name="i_iIndex">The range code index. The value is between 0~4.</param>
            <returns>The range code.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam5017UHRangeIndex(System.Byte)">
            <summary>
            Get the ADAM-5017UH range code index
            </summary>
            <param name="i_byRange">The range code</param>
            <returns>The range index, base-0. If the range is not defined, then return -1.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam5017UHRangeName(System.Byte)">
            <summary>
            Get the ADAM-5017UH range name.
            </summary>
            <param name="i_byRange">The range code.</param>
            <returns>The range name.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam5017UHScaledValue(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <param name="i_iValue"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam5018RangeCode(System.Int32)">
            <summary>
            Get the ADAM-5018 range code.
            </summary>
            <param name="i_iIndex">The range code index. The value is between 0~13.</param>
            <returns>The range code.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam5018RangeIndex(System.Byte)">
            <summary>
            Get the ADAM-5018 range code index
            </summary>
            <param name="i_byRange">The range code</param>
            <returns>The range index, base-0. If the range is not defined, then return -1.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam5018RangeName(System.Byte)">
            <summary>
            Get the ADAM-5018 range name.
            </summary>
            <param name="i_byRange">The range code.</param>
            <returns>The range name.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam5018ScaledValue(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <param name="i_iValue"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam5018PRangeCode(System.Int32)">
            <summary>
            Get the ADAM-5018P range code.
            </summary>
            <param name="i_iIndex">The range code index. The value is between 0~14.</param>
            <returns>The range code.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam5018PRangeIndex(System.Byte)">
            <summary>
            Get the ADAM-5018P range code index
            </summary>
            <param name="i_byRange">The range code</param>
            <returns>The range index, base-0. If the range is not defined, then return -1.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam5018PRangeName(System.Byte)">
            <summary>
            Get the ADAM-5018P range name.
            </summary>
            <param name="i_byRange">The range code.</param>
            <returns>The range name.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam5018PScaledValue(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <param name="i_iValue"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam6015RangeCode(System.Int32)">
            <summary>
            
            </summary>
            <param name="i_iIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam6015RangeIndex(System.Byte)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam6015RangeName(System.Byte)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam6015ScaledValue(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <param name="i_iValue"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam6017RangeCode(System.Int32)">
            <summary>
            
            </summary>
            <param name="i_iIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam6017RangeIndex(System.Byte)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam6017RangeName(System.Byte)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam6017ScaledValue(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <param name="i_iValue"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam6018RangeCode(System.Int32)">
            <summary>
            
            </summary>
            <param name="i_iIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam6018RangeIndex(System.Byte)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam6018RangeName(System.Byte)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam6018ScaledValue(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <param name="i_iValue"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam6022RangeCode(System.Int32)">
            <summary>
            
            </summary>
            <param name="i_iIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam6022RangeIndex(System.Byte)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam6022RangeName(System.Byte)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam6022ScaledValue(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <param name="i_iValue"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam6024RangeCode(System.Int32)">
            <summary>
            
            </summary>
            <param name="i_iIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam6024RangeIndex(System.Byte)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam6024RangeName(System.Byte)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAdam6024ScaledValue(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <param name="i_iValue"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetScaledValue(Advantech.Adam.Adam4000Type,System.Byte,System.Int32)">
            <summary>
            Get the scaled value
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <param name="i_byRange">The range code</param>
            <param name="i_iValue">The value that is read by Modbus.</param>
            <returns>Return scaled value if success, otherwise, return 0.0</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetScaledValue(Advantech.Adam.Adam5000Type,System.Byte,System.Int32)">
            <summary>
            Get the scaled value
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <param name="i_byRange">The range code</param>
            <param name="i_iValue">The value that is read by Modbus.</param>
            <returns>Return scaled value if success, otherwise, return 0.0</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetScaledValue(Advantech.Adam.Adam6000Type,System.Byte,System.Int32)">
            <summary>
            Get the scaled value
            </summary>
            <param name="adam6000Type">ADAM-6000 type</param>
            <param name="i_byRange">The range code</param>
            <param name="i_iValue">The value that is read by Modbus.</param>
            <returns>Return scaled value if success, otherwise, return 0.0</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetRangeCode(Advantech.Adam.Adam4000Type,System.Int32)">
            <summary>
            Get the range code
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <param name="i_iIndex">The range code index</param>
            <returns>Return range code if success, otherwise, return 255</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetRangeCode(Advantech.Adam.Adam5000Type,System.Int32)">
            <summary>
            Get the range code
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <param name="i_iIndex">The range code index</param>
            <returns>Return range code if success, otherwise, return 255</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetRangeCode(Advantech.Adam.Adam6000Type,System.Int32)">
            <summary>
            Get the range code
            </summary>
            <param name="adam6000Type">ADAM-6000 type</param>
            <param name="i_iIndex">The range code index</param>
            <returns>Return range code if success, otherwise, return 255</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetRangeName(Advantech.Adam.Adam4000Type,System.Byte)">
            <summary>
            Get the range name
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <param name="i_byRange">The range code.</param>
            <returns>Return range code if success, otherwise, return empty string.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetRangeName(Advantech.Adam.Adam5000Type,System.Byte)">
            <summary>
            Get the range name
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <param name="i_byRange">The range code.</param>
            <returns>Return range code if success, otherwise, return empty string.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetRangeName(Advantech.Adam.Adam6000Type,System.Byte)">
            <summary>
            Get the range name
            </summary>
            <param name="adam6000Type">ADAM-6000 type</param>
            <param name="i_byRange">The range code.</param>
            <returns>Return range code if success, otherwise, return empty string.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetRangeIndex(Advantech.Adam.Adam4000Type,System.Byte)">
            <summary>
            Get the range code index
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <param name="i_byRange">The range code.</param>
            <returns>Return range code index if success, otherwise, return -1</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetRangeIndex(Advantech.Adam.Adam5000Type,System.Byte)">
            <summary>
            Get the range code index
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <param name="i_byRange">The range code.</param>
            <returns>Return range code index if success, otherwise, return -1</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetRangeIndex(Advantech.Adam.Adam6000Type,System.Byte)">
            <summary>
            Get the range code index
            </summary>
            <param name="adam6000Type">ADAM-6000 type</param>
            <param name="i_byRange">The range code index.</param>
            <returns>Return range code index if success, otherwise, return -1</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetChannelTotal(Advantech.Adam.Adam4000Type)">
            <summary>
            Get the channel total
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <returns>Return channel total if success, otherwise, return 0.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetChannelTotal(Advantech.Adam.Adam5000Type)">
            <summary>
            Get the channel total
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <returns>Return channel total if success, otherwise, return 0.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetChannelTotal(Advantech.Adam.Adam6000Type)">
            <summary>
            Get the channel total
            </summary>
            <param name="adam6000Type">ADAM-6000 type</param>
            <returns>Return channel total if success, otherwise, return 0.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetRangeTotal(Advantech.Adam.Adam4000Type)">
            <summary>
            Get the range total
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <returns>Return range total if success, otherwise, return 0.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetRangeTotal(Advantech.Adam.Adam5000Type)">
            <summary>
            Get the range total
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <returns>Return range total if success, otherwise, return 0.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetRangeTotal(Advantech.Adam.Adam6000Type)">
            <summary>
            Get the range total
            </summary>
            <param name="adam6000Type">ADAM-6000 type</param>
            <returns>Return range total if success, otherwise, return 0.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetFloatFormat(Advantech.Adam.Adam4000Type,System.Byte)">
            <summary>
            Get floating format
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <param name="i_byRange">The rnage code</param>
            <returns>Return the float format string.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetFloatFormat(Advantech.Adam.Adam5000Type,System.Byte)">
            <summary>
            Get floating format
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <param name="i_byRange">The rnage code</param>
            <returns>Return the float format string.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetFloatFormat(Advantech.Adam.Adam6000Type,System.Byte)">
            <summary>
            Get floating format
            </summary>
            <param name="adam6000Type">ADAM-6000 type</param>
            <param name="i_byRange">The rnage code</param>
            <returns>Return the float format string.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetUnitName(Advantech.Adam.Adam4000Type,System.Byte)">
            <summary>
            Get unit string
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <param name="i_byRange">The range code</param>
            <returns>Return unit string if success, otherwise, return an empty string.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetUnitName(Advantech.Adam.Adam5000Type,System.Byte)">
            <summary>
            Get unit string
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <param name="i_byRange">The range code</param>
            <returns>Return unit string if success, otherwise, return an empty string.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetUnitName(Advantech.Adam.Adam6000Type,System.Byte)">
            <summary>
            Get unit string
            </summary>
            <param name="adam6000Type">ADAM-6000 type</param>
            <param name="i_byRange">The range code</param>
            <returns>Return unit string if success, otherwise, return an empty string.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetSpanCalibrationName(Advantech.Adam.Adam4000Type,System.Byte)">
            <summary>
            Get the span calibration apply string
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <param name="i_byRange">The range code</param>
            <returns>Return calibration string if success, otherwise, return an empty string.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetSpanCalibrationName(Advantech.Adam.Adam5000Type,System.Byte)">
            <summary>
            Get the span calibration apply string
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <param name="i_byRange">The range code</param>
            <returns>Return calibration string if success, otherwise, return an empty string.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetSpanCalibrationName(Advantech.Adam.Adam6000Type,System.Byte)">
            <summary>
            Get the span calibration apply string
            </summary>
            <param name="adam6000Type">ADAM-6000 type</param>
            <param name="i_byRange">The range code</param>
            <returns>Return calibration string if success, otherwise, return an empty string.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetZeroCalibrationName(Advantech.Adam.Adam4000Type,System.Byte)">
            <summary>
            Get the zero calibration apply string
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <param name="i_byRange">The range code</param>
            <returns>Return calibration string if success, otherwise, return an empty string.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetZeroCalibrationName(Advantech.Adam.Adam5000Type,System.Byte)">
            <summary>
            Get the zero calibration apply string
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <param name="i_byRange">The range code</param>
            <returns>Return calibration string if success, otherwise, return an empty string.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetZeroCalibrationName(Advantech.Adam.Adam6000Type,System.Byte)">
            <summary>
            
            </summary>
            <param name="adam6000Type"></param>
            <param name="i_byRange"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetIntegrationTotal(Advantech.Adam.AdamType)">
            <summary>
            Get integration total.
            </summary>
            <param name="adamType">The ADAM type.</param>
            <returns>Return integration total if success, otherwise, return -1.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetIntegrationIndex(Advantech.Adam.AdamType,System.Byte)">
            <summary>
            Get integration index
            </summary>
            <param name="adamType">The ADAM type.</param>
            <param name="i_byCode">The integration code</param>
            <returns>Return integration index if success, otherwise, return -1.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetIntegrationCode(Advantech.Adam.AdamType,System.Int32)">
            <summary>
            Get the integration code
            </summary>
            <param name="adamType">The ADAM type.</param>
            <param name="i_iIndex">The integration index. The value is between 0~1.</param>
            <returns>Return integration code if success, otherwise, return 255.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetIntegrationName(Advantech.Adam.AdamType,System.Byte)">
            <summary>
            Get integration name.
            </summary>
            <param name="adamType">The ADAM type.</param>
            <param name="i_byCode">The integration index.</param>
            <returns>Return integration string if success, otherwise, return an empty string.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetDataFormatTotal(Advantech.Adam.Adam4000Type)">
            <summary>
            Get the data format total
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <returns>Return range total if success, otherwise, return 0.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetDataFormatCode(Advantech.Adam.Adam4000Type,System.Int32)">
            <summary>
            Get the data format code.
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <param name="i_iIndex">The data format index. The value is between 0~2.</param>
            <returns>The range code.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetDataFormatIndex(Advantech.Adam.Adam4000Type,System.Byte)">
            <summary>
            Get the data format index
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <param name="i_byDataFormat">The data format code.</param>
            <returns>Return range code index if success, otherwise, return -1</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetDataFormatName(Advantech.Adam.Adam4000Type,System.Byte)">
            <summary>
            Get the data format name
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <param name="i_byDataFormat">The data format code.</param>
            <returns>Return range code if success, otherwise, return empty string.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetDataFormatTotal(Advantech.Adam.Adam5000Type)">
            <summary>
            Get the data format total
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <returns>Return range total if success, otherwise, return 0.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetDataFormatCode(Advantech.Adam.Adam5000Type,System.Int32)">
            <summary>
            Get the data format code.
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <param name="i_iIndex">The data format index. The value is between 0~1.</param>
            <returns>The range code.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetDataFormatIndex(Advantech.Adam.Adam5000Type,System.Byte)">
            <summary>
            Get the data format index
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <param name="i_byDataFormat">The data format code.</param>
            <returns>Return range code index if success, otherwise, return -1</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetDataFormatName(Advantech.Adam.Adam5000Type,System.Byte)">
            <summary>
            Get the data format name
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <param name="i_byDataFormat">The data format code.</param>
            <returns>Return range code if success, otherwise, return empty string.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetChannelDiagnostic(System.Int32[]@)">
            <summary>
            Support module: ADAM-4022T, ADAM-4019P
            Get channel diagnostic status.
            </summary>
            <param name="o_iStatus">The status.
            For ADAM-4019P the array length is 8: 0 means normal; 1 means open wire.
            For ADAM-4022T the array length is 4: 0 means normal; 1 means over high; 2 means over low; 3 means ivalid calibration.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetValues(System.Int32,System.Single[]@,Advantech.Adam.Adam4000_ChannelStatus[]@)">
            <summary>
            Support module: ADAM-4000
            Get channel values when the data format is set to engineering unit, percent or ohms(ADAM-4013, ADAM-4015).
            </summary>
            <param name="i_iChannelTotal">The total of the channels on the module. The value is between 1~8</param>
            <param name="o_fValues">Array of channel values.</param>
            <param name="o_status">The channel status.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetValues(System.Int32,System.Int32[]@)">
            <summary>
            Support module: ADAM-4000
            Get channel values when the data format is set to two's complement hexdecimal.
            </summary>
            <param name="i_iChannelTotal">The total of the channels. The value is between 1~8</param>
            <param name="o_iValues">Array of channel values.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetValue(System.Int32,System.Int32@)">
            <summary>
            Support module: ADAM-4000
            Get channel values when the data format is set to two's complement hexdecimal.
            </summary>
            <param name="i_iChannel">The channel index. The value is between 0~7</param>
            <param name="o_iValue">The channel value.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetValue(System.Int32,System.Single@,Advantech.Adam.Adam4000_ChannelStatus@)">
            <summary>
            Support module: ADAM-4000
            Get specified channel value when the data format is set to engineering unit, percent or ohms(ADAM-4015).
            If the module has only single channel, for example ADAM-4011, use GetValues instead of this method.
            </summary>
            <param name="i_iChannel">The channel index. The value is between 0~7</param>
            <param name="o_fValue">The channel value.</param>
            <param name="o_status">The channel status.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetValues(System.Int32,System.Int32,System.Single[]@)">
            <summary>
            Support module: ADAM-5000, ADAM-5000/TCP.
            Get channel values when the data format is set to engineering unit or ohms(ADAM-5013 on ADAM-5000).
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="i_iChannelTotal">The total of the channels. The value is between 1~8</param>
            <param name="o_fValues">Array of channel values.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetValues(System.Int32,System.Int32,System.Int32[]@)">
            <summary>
            Support module: ADAM-5000
            Get channel values when the data format is set to two's complement hexdecimal.
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="i_iChannelTotal">The total of the channels. The value is between 1~8</param>
            <param name="o_iValues">Array of channel values.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetValue(System.Int32,System.Int32,System.Single@)">
            <summary>
            Support module: ADAM-5000, ADAM-5000/TCP.
            Get specified channel value. The value returned is in engineering unit format.
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="i_iChannel">The channel index. The value is between 0~7</param>
            <param name="o_fValue">The channel value.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetChannelEnabled(System.Int32,System.Boolean[]@)">
            <summary>
            Support module: ADAM-6000.
            Get channel enabled status
            </summary>
            <param name="i_iChannelTotal">The total of the channels. The value is between 1~8</param>
            <param name="o_bEnabled">Array of channel status.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.SetChannelEnabled(System.Boolean[])">
            <summary>
            Support module: ADAM-6000.
            Set channel enabled status
            </summary>
            <param name="i_bEnabled">Array of channel status.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetChannelEnabled(System.Int32,System.Int32,System.Boolean[]@)">
            <summary>
            Support module: ADAM-5000, ADAM-5000TCP
            Get channel enabled status
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="i_iChannelTotal">The total of the channels. The value is between 1~8</param>
            <param name="o_bEnabled">Array of channel status.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.SetChannelEnabled(System.Int32,System.Boolean[])">
            <summary>
            Support module: ADAM-5000, ADAM-5000TCP
            Set channel enabled status
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="i_bEnabled">Array of channel status.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetAverageChannelEnabled(System.Int32,System.Boolean[]@)">
            <summary>
            Support module: ADAM-6000.
            Get channel enabled status for average
            </summary>
            <param name="i_iChannelTotal">The total of the channels. The value is between 1~8</param>
            <param name="o_bEnabled">Array of channel status.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.SetAverageChannelEnabled(System.Boolean[])">
            <summary>
            Support module: ADAM-6000.
            Set channel enabled status for average
            </summary>
            <param name="i_bEnabled">Array of channel status.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetRangeIntegration(System.Int32,System.Byte@,System.Byte@)">
            <summary>
            Support module: ADAM-5013, ADAM-5017, ADAM-5018 on ADAM-5000/TCP.
            Get module analog input range and integration time
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="o_byRange">The input range code</param>
            <param name="o_byIntegration">The integration code</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.SetRangeIntegration(System.Int32,System.Byte,System.Byte)">
            <summary>
            Support module: ADAM-5013, ADAM-5017, ADAM-5018 on ADAM-5000/TCP.
            Set module analog input range and integration time
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="i_byRange">The input range code</param>
            <param name="i_byIntegration">The integration code</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetRangeIntegrationDataFormat(System.Int32,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Support module: ADAM-5013, ADAM-5017, ADAM-5018 on ADAM-5000.
            Get module analog input range, integration time and data format
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="o_byRange">The input range code</param>
            <param name="o_byIntegration">The integration code</param>
            <param name="o_byDataFormat">The data format code.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.SetRangeIntegrationDataFormat(System.Int32,System.Byte,System.Byte,System.Byte)">
            <summary>
            Support module: ADAM-5013, ADAM-5017, ADAM-5018 on ADAM-5000.
            Set module analog input range, integration time and data format
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="i_byRange">The input range code</param>
            <param name="i_byIntegration">The integration code</param>
            <param name="i_byDataFormat">The data format code.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetDataFormat(System.Int32,System.Byte@)">
            <summary>
            Support module: ADAM-5017H, ADAM-5017UH.
            Get module data format
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="o_byDataFormat">The data format code.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.SetDataFormat(System.Int32,System.Byte)">
            <summary>
            Support module: ADAM-5017H, ADAM-5017UH.
            Set module data format
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="i_byDataFormat">The data format code.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetIntegration(System.Byte@)">
            <summary>
            Support module: ADAM-6015, ADAM-6017, ADAM-6018.
            Get module integration time
            </summary>
            <param name="o_byIntegration">The integration code</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.SetIntegration(System.Byte)">
            <summary>
            Support module: ADAM-6015, ADAM-6017, ADAM-6018.
            Set module integration time
            </summary>
            <param name="i_byIntegration">The integration code</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetInputRange(System.Int32,System.Int32,System.Byte@)">
            <summary>
            Support module: ADAM-5017H, ADAM-5017UH, ADAM-5018P.
            Get module analog input range
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="i_iChannel">The channel index. The value is between 0~7</param>
            <param name="o_byRange">The input range code</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.SetInputRange(System.Int32,System.Int32,System.Byte)">
            <summary>
            Support module: ADAM-5017H, ADAM-5017UH, ADAM-5018P.
            Set module analog input range
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="i_iChannel">The channel index. The value is between 0~7</param>
            <param name="i_byRange">The input range code</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetInputRange(System.Int32,System.Byte@)">
            <summary>
            Support module: ADAM-4000, ADAM-6000.
            Get module analog input range
            </summary>
            <param name="i_iChannel">The channel index. The value is between 0~7</param>
            <param name="o_byRange">The input range code</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.SetInputRange(System.Int32,System.Byte)">
            <summary>
            Support module: ADAM-4000, ADAM-6000.
            Set module analog input range
            </summary>
            <param name="i_iChannel">The channel index. The value is between 0~7</param>
            <param name="i_byRange">The input range code</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.SetSpanCalibration(System.Int32)">
            <summary>
            Support module: ADAM-5000, ADAM-5000TCP.
            Set analog input Span calibration
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.SetSpanCalibration">
            <summary>
            Support module: ADAM-4000, ADAM-6000.
            Set analog input Span calibration
            </summary>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.SetChannelSpanCalibration(System.Int32)">
            <summary>
            Support module: ADAM-4000.
            Set analog input Span calibration
            </summary>
            <param name="i_iChannel">Channel index. The value is between 0~7</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.SetZeroCalibration(System.Int32)">
            <summary>
            Support module: ADAM-5000, ADAM-5000TCP.
            Set analog input Zero calibration
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.SetZeroCalibration">
            <summary>
            Support module: ADAM-4000, ADAM-6000.
            Set analog input Zero calibration
            </summary>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.SetChannelZeroCalibration(System.Int32)">
            <summary>
            Support module: ADAM-4000.
            Set analog input Zero calibration
            </summary>
            <param name="i_iChannel">Channel index. The value is between 0~7</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.SetChannelNegCalibration(System.Int32)">
            <summary>
            Support module: ADAM-4000.
            Set analog input Neg. calibration
            </summary>
            <param name="i_iChannel">Channel index. The value is between 0~7</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetCJCValue(System.Int32,System.Single@)">
            <summary>
            Support module: ADAM-5000, ADAM-5000TCP.
            Get CJC calibration value
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="o_fCJCVal">The CJC calibration value</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetCJCValue(System.Single@)">
            <summary>
            Support module: ADAM-4000, ADAM-6000.
            Get CJC calibration value
            </summary>
            <param name="o_fCJCVal">The CJC calibration value</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.SetCJCOffset(System.Int32,System.Single)">
            <summary>
            Support module: ADAM-5000, ADAM-5000TCP.
            Set CJC offset calibration value
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="i_fCJCOffset">The CJC offset value</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.SetCJCOffset(System.Single)">
            <summary>
            Support module: ADAM-4000.
            Set CJC offset calibration value
            </summary>
            <param name="i_fCJCOffset">The CJC offset value</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.SetCJCValue(System.Single)">
            <summary>
            Support module: ADAM-6000.
            Set CJC calibration value
            </summary>
            <param name="i_fCJCOffset">The CJC offset value</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetLeadWire(System.Int32,System.Single@)">
            <summary>
            Support module: ADAM-4000.
            Get lead wire resistance value
            </summary>
            <param name="i_iType">The thermistor type. 0 for 3k, others for 10k.</param>
            <param name="o_fVal">The lead wire resistance value</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.SetLeadWire(System.Int32,System.Single)">
            <summary>
            Support module: ADAM-4000.
            Set lead wire resistance value
            </summary>
            <param name="i_iType">The thermistor type. 0 for 3k, others for 10k.</param>
            <param name="i_fVal">The lead wire resistance value. The value must be between -655.35~655.35</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetMemConfig(System.Boolean[]@,System.Boolean@,System.Byte@,System.Byte@,System.Int32@)">
            <summary>
            Support module: ADAM-4018M.
            Get memory configuration.
            </summary>
            <param name="o_bEnabled">The storage enabled status for all channels. The length of the array is 8.</param>
            <param name="o_bRecord">The standalone recording status. Value 0 means recording disabled; Value 1 means recording enabled.</param>
            <param name="o_byRecordMode">The recording mode. Value 0 means standard mode; Value 1 means event mode. Value 2 means mixed mode.</param>
            <param name="o_MemMode">The memory buffer storage mode. Value 0 means linear buffer; Value 1 means cycle buffer.</param>
            <param name="o_iInterval">The recording interval in seconds. The range is between 2~65535.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.SetMemConfig(System.Boolean[],System.Boolean,System.Byte,System.Byte,System.Int32)">
            <summary>
            Support module: ADAM-4018M.
            Set memory configuration.
            </summary>
            <param name="i_bEnabled">The storage enabled status for all channels. The length of the array is 8.</param>
            <param name="i_bRecord">The standalone recording status. Value 0 means recording disabled; Value 1 means recording enabled.</param>
            <param name="i_byRecordMode">The recording mode. Value 0 means standard mode; Value 1 means event mode. Value 2 means mixed mode.</param>
            <param name="i_MemMode">The memory buffer storage mode. Value 0 means linear buffer; Value 1 means cycle buffer.</param>
            <param name="i_iInterval">The recording interval in seconds. The range is between 2~65535.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetMemOperation(System.Boolean@)">
            <summary>
            Support module: ADAM-4018M.
            Get memory operation.
            </summary>
            <param name="o_bRecording">The recording operation status.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.SetMemOperation(System.Boolean)">
            <summary>
            Support module: ADAM-4018M.
            Set memory operation.
            </summary>
            <param name="i_bRecording">The recording operation status.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetMemStandardRecordCount(System.Int32@)">
            <summary>
            Support module: ADAM-4018M.
            Get memory standard record counts.
            </summary>
            <param name="o_iCount">The record counts.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetMemEventRecordCount(System.Int32@)">
            <summary>
            Support module: ADAM-4018M.
            Get memory event record counts.
            </summary>
            <param name="o_iCount">The record counts.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogInput.GetMemRecordData(System.Int32,System.Int32@,System.Single@,System.Int64@)">
            <summary>
            Support module: ADAM-4018M.
            Get memory data record.
            </summary>
            <param name="i_iIndex">The index of the record. For standard mode, the range is between 0~9999.
            For event mode, the range is between 0~4599. For mixed mode, the index 0~4999 is for standard data
            and index 5000~7299 is for event data.</param>
            <param name="o_iChannel">The channel index of the recorded data.</param>
            <param name="o_fData">The recorded data.</param>
            <param name="o_lElapse">The elapsed time for event data record since module started. For standard data, this value is 0.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="T:Advantech.Adam.Adam_SlewRate">
            <summary>
            Adam slew rate
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_SlewRate.Immediate">
            <summary>
            Immediate change
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_SlewRate.V_p0625_mA_p125">
            <summary>
            0.0625 V/sec, 0.125 mA/sec
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_SlewRate.V_p125_mA_p250">
            <summary>
            0.125 V/sec, 0.250 mA/sec
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_SlewRate.V_p250_mA_p5">
            <summary>
            0.250 V/sec, 0.500 mA/sec
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_SlewRate.V_p5_mA_1">
            <summary>
            0.500 V/sec, 1 mA/sec
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_SlewRate.V_1_mA_2">
            <summary>
            1 V/sec, 2 mA/sec
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_SlewRate.V_2_mA_4">
            <summary>
            2 V/sec, 4 mA/sec
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_SlewRate.V_4_mA_8">
            <summary>
            4 V/sec, 8 mA/sec
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_SlewRate.V_8_mA_16">
            <summary>
            8 V/sec, 16 mA/sec
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_SlewRate.V_16_mA_32">
            <summary>
             16 V/sec, 32 mA/sec
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_SlewRate.V_32_mA_64">
            <summary>
            32 V/sec, 64 mA/sec
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_SlewRate.V_64_mA_128">
            <summary>
            64 V/sec, 128 mA/sec
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_SlewRate.Unknown">
            <summary>
            Unknown range
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam4021_OutputRange">
            <summary>
            Adam-4021 Output range
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4021_OutputRange.mA_0To20">
            <summary>
            0~20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4021_OutputRange.mA_4To20">
            <summary>
            4~20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4021_OutputRange.V_0To10">
            <summary>
            0~10 V
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4021_OutputRange.Unknown">
            <summary>
            Unknown range
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam4022T_OutputRange">
            <summary>
            Adam-4022T Output range
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4022T_OutputRange.mA_0To20">
            <summary>
            0~20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4022T_OutputRange.mA_4To20">
            <summary>
            4~20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4022T_OutputRange.V_0To10">
            <summary>
            0~10 V
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4022T_OutputRange.Unknown">
            <summary>
            Unknown range
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam4024_OutputRange">
            <summary>
            Adam-4024 Output range
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4024_OutputRange.mA_0To20">
            <summary>
            0~20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4024_OutputRange.mA_4To20">
            <summary>
            4~20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4024_OutputRange.V_Neg10To10">
            <summary>
            -10~10 V
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4024_OutputRange.Unknown">
            <summary>
            Unknown range
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam5024_OutputRange">
            <summary>
            Adam-5024 Output range
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5024_OutputRange.mA_0To20">
            <summary>
            0~20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5024_OutputRange.mA_4To20">
            <summary>
            4~20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5024_OutputRange.V_0To10">
            <summary>
            0~10 V
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5024_OutputRange.Unknown">
            <summary>
            Unknown range
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam6022_OutputRange">
            <summary>
            Adam-6022 Output range
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6022_OutputRange.mA_0To20">
            <summary>
            0~20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6022_OutputRange.mA_4To20">
            <summary>
            4~20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6022_OutputRange.V_0To10">
            <summary>
            0~10 V
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6022_OutputRange.Unknown">
            <summary>
            Unknown range
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam6024_OutputRange">
            <summary>
            Adam-6024 Output range
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6024_OutputRange.mA_0To20">
            <summary>
            0~20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6024_OutputRange.mA_4To20">
            <summary>
            4~20 mA
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6024_OutputRange.V_0To10">
            <summary>
            0~10 V
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6024_OutputRange.Unknown">
            <summary>
            Unknown range
            </summary>
        </member>
        <member name="T:Advantech.Adam.AnalogOutput">
            <summary>
            Summary description for AnalogOutput.
            </summary>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.#ctor(Advantech.Adam.AdamCom)">
            <summary>
            The AnalogOutput constructor.
            </summary>
            <param name="i_com">The AdamCom object.</param>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.#ctor(Advantech.Adam.AdamSocket)">
            <summary>
            The AnalogOutput constructor.
            </summary>
            <param name="i_socket">The AdamSocket object.</param>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetSlewRateCode(System.Int32)">
            <summary>
            Get the slew rate code.
            </summary>
            <param name="i_iIndex">The slew rate code index.</param>
            <returns>Return range code if success, otherwise, return 255</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetSlewRateName(System.Byte)">
            <summary>
            Get the slew rate name
            </summary>
            <param name="i_bySlew">Adam_SlewRate.</param>
            <returns>Return range code if success, otherwise, return empty string.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetSlewRateTotal">
            <summary>
            Get the slew rate total
            </summary>
            <returns>Return slew rate total if success, otherwise, return 0.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetSlewRateIndex(System.Byte)">
            <summary>
            Get the slew rate code index
            </summary>
            <param name="i_bySlew">The slew rate code index.</param>
            <returns>Return range code index if success, otherwise, return -1</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetAdam4021RangeCode(System.Int32)">
            <summary>
            Get the ADAM-4021 range code.
            </summary>
            <param name="i_iIndex">The range code index. The value is between 0~2.</param>
            <returns>The range code.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetAdam4021RangeIndex(System.Byte)">
            <summary>
            Get the ADAM-4021 range code index
            </summary>
            <param name="i_byRange">The range code</param>
            <returns>The range index, base-0. If the range is not defined, then return -1.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetAdam4021RangeName(System.Byte)">
            <summary>
            Get the ADAM-4021 range name.
            </summary>
            <param name="i_byRange">The range code.</param>
            <returns>The range name.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetAdam4022TRangeCode(System.Int32)">
            <summary>
            Get the ADAM-4022T range code.
            </summary>
            <param name="i_iIndex">The range code index. The value is between 0~2.</param>
            <returns>The range code.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetAdam4022TRangeIndex(System.Byte)">
            <summary>
            Get the ADAM-4022T range code index
            </summary>
            <param name="i_byRange">The range code</param>
            <returns>The range index, base-0. If the range is not defined, then return -1.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetAdam4022TRangeName(System.Byte)">
            <summary>
            Get the ADAM-4022T range name.
            </summary>
            <param name="i_byRange">The range code.</param>
            <returns>The range name.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetAdam4022TScaledValue(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <param name="i_iValue"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetAdam4024RangeCode(System.Int32)">
            <summary>
            Get the ADAM-4024 range code.
            </summary>
            <param name="i_iIndex">The range code index. The value is between 0~2.</param>
            <returns>The range code.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetAdam4024RangeIndex(System.Byte)">
            <summary>
            Get the ADAM-4024 range code index
            </summary>
            <param name="i_byRange">The range code</param>
            <returns>The range index, base-0. If the range is not defined, then return -1.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetAdam4024RangeName(System.Byte)">
            <summary>
            Get the ADAM-4024 range name.
            </summary>
            <param name="i_byRange">The range code.</param>
            <returns>The range name.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetAdam4024ScaledValue(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <param name="i_iValue"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetScaledValue(Advantech.Adam.Adam4000Type,System.Byte,System.Int32)">
            <summary>
            Get the scaled value
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <param name="i_byRange">The range code</param>
            <param name="i_iValue">The value that is read by Modbus.</param>
            <returns>Return scaled value if success, otherwise, return 0.0</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetSlewRateCode(Advantech.Adam.Adam4000Type,System.Int32)">
            <summary>
            Get the slew rate code.
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <param name="i_iIndex">The slew rate code index.</param>
            <returns>Return slew rate code if success, otherwise, return 255</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetSlewRateName(Advantech.Adam.Adam4000Type,System.Byte)">
            <summary>
            Get the slew rate name
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <param name="i_bySlew">Adam_SlewRate.</param>
            <returns>Return slew rate name if success, otherwise, return empty string.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetSlewRateTotal(Advantech.Adam.Adam4000Type)">
            <summary>
            Get the slew rate total
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <returns>Return slew rate total if success, otherwise, return 0.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetSlewRateIndex(Advantech.Adam.Adam4000Type,System.Byte)">
            <summary>
            Get the slew rate code index
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <param name="i_bySlew">The slew rate code index.</param>
            <returns>Return slew rate index if success, otherwise, return -1</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetRangeCode(Advantech.Adam.Adam4000Type,System.Int32)">
            <summary>
            Get the range code
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <param name="i_iIndex">The range code index</param>
            <returns>Return range code if success, otherwise, return 255</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetRangeName(Advantech.Adam.Adam4000Type,System.Byte)">
            <summary>
            Get the range name
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <param name="i_byRange">The range code.</param>
            <returns>Return range code if success, otherwise, return empty string.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetRangeIndex(Advantech.Adam.Adam4000Type,System.Byte)">
            <summary>
            Get the range code index
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <param name="i_byRange">The range code index.</param>
            <returns>Return range code index if success, otherwise, return -1</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetChannelTotal(Advantech.Adam.Adam4000Type)">
            <summary>
            Get the channel total
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <returns>Return channel total if success, otherwise, return 0.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetRangeTotal(Advantech.Adam.Adam4000Type)">
            <summary>
            Get the range total
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <returns>Return range total if success, otherwise, return 0.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetFloatFormat(Advantech.Adam.Adam4000Type,System.Byte)">
            <summary>
            Get floating format
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <param name="i_byRange">The rnage code</param>
            <returns>Return the float format string.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetUnitName(Advantech.Adam.Adam4000Type,System.Byte)">
            <summary>
            Get unit string
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <param name="i_byRange">The range code</param>
            <returns>Return unit string if success, otherwise, return an empty string.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetSpanCalibrationName(Advantech.Adam.Adam4000Type,System.Byte)">
            <summary>
            Get the span calibration apply string
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <param name="i_byRange">The range code</param>
            <returns>Return calibration string if success, otherwise, return an empty string.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetZeroCalibrationName(Advantech.Adam.Adam4000Type,System.Byte)">
            <summary>
            Get the zero calibration apply string
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <param name="i_byRange">The range code</param>
            <returns>Return calibration string if success, otherwise, return an empty string.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetDataFormatTotal(Advantech.Adam.Adam4000Type)">
            <summary>
            Get the data format total
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <returns>Return range total if success, otherwise, return 0.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetDataFormatCode(Advantech.Adam.Adam4000Type,System.Int32)">
            <summary>
            Get the data format code.
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <param name="i_iIndex">The data format index. The value is between 0~2.</param>
            <returns>The range code.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetDataFormatIndex(Advantech.Adam.Adam4000Type,System.Byte)">
            <summary>
            Get the data format index
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <param name="i_byDataFormat">The data format code.</param>
            <returns>Return range code index if success, otherwise, return -1</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetDataFormatName(Advantech.Adam.Adam4000Type,System.Byte)">
            <summary>
            Get the data format name
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <param name="i_byDataFormat">The data format code.</param>
            <returns>Return range code if success, otherwise, return empty string.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetAdam5024RangeCode(System.Int32)">
            <summary>
            Get the ADAM-5024 range code.
            </summary>
            <param name="i_iIndex">The range code index. The value is between 0~9.</param>
            <returns>The range code.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetAdam5024RangeIndex(System.Byte)">
            <summary>
            Get the ADAM-5024 range code index
            </summary>
            <param name="i_byRange">The range code</param>
            <returns>The range index, base-0. If the range is not defined, then return -1.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetAdam5024RangeName(System.Byte)">
            <summary>
            Get the ADAM-5024 range name.
            </summary>
            <param name="i_byRange">The range code.</param>
            <returns>The range name.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetAdam5024ScaledValue(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <param name="i_iValue"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetScaledValue(Advantech.Adam.Adam5000Type,System.Byte,System.Int32)">
            <summary>
            Get the scaled value
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <param name="i_byRange">The range code</param>
            <param name="i_iValue">The value that is read by Modbus.</param>
            <returns>Return scaled value if success, otherwise, return 0.0</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetSlewRateCode(Advantech.Adam.Adam5000Type,System.Int32)">
            <summary>
            Get the slew rate code.
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <param name="i_iIndex">The slew rate code index.</param>
            <returns>Return slew rate code if success, otherwise, return 255</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetSlewRateName(Advantech.Adam.Adam5000Type,System.Byte)">
            <summary>
            Get the slew rate name
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <param name="i_bySlew">Adam_SlewRate.</param>
            <returns>Return slew rate name if success, otherwise, return empty string.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetSlewRateTotal(Advantech.Adam.Adam5000Type)">
            <summary>
            Get the slew rate total
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <returns>Return slew rate total if success, otherwise, return 0.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetSlewRateIndex(Advantech.Adam.Adam5000Type,System.Byte)">
            <summary>
            Get the slew rate code index
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <param name="i_bySlew">The slew rate code index.</param>
            <returns>Return slew rate index if success, otherwise, return -1</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetRangeCode(Advantech.Adam.Adam5000Type,System.Int32)">
            <summary>
            Get the range code
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <param name="i_iIndex">The range code index</param>
            <returns>Return range code if success, otherwise, return 255</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetRangeName(Advantech.Adam.Adam5000Type,System.Byte)">
            <summary>
            Get the range name
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <param name="i_byRange">The range code.</param>
            <returns>Return range code if success, otherwise, return empty string.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetRangeIndex(Advantech.Adam.Adam5000Type,System.Byte)">
            <summary>
            Get the range code index
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <param name="i_byRange">The range code index.</param>
            <returns>Return range code index if success, otherwise, return -1</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetChannelTotal(Advantech.Adam.Adam5000Type)">
            <summary>
            Get the channel total
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <returns>Return channel total if success, otherwise, return 0.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetRangeTotal(Advantech.Adam.Adam5000Type)">
            <summary>
            Get the range total
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <returns>Return range total if success, otherwise, return 0.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetFloatFormat(Advantech.Adam.Adam5000Type,System.Byte)">
            <summary>
            Get floating format
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <param name="i_byRange">The rnage code</param>
            <returns>Return the float format string.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetUnitName(Advantech.Adam.Adam5000Type,System.Byte)">
            <summary>
            Get unit string
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <param name="i_byRange">The range code</param>
            <returns>Return unit string if success, otherwise, return an empty string.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetSpanCalibrationName(Advantech.Adam.Adam5000Type,System.Byte)">
            <summary>
            Get the span calibration apply string
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <param name="i_byRange">The range code</param>
            <returns>Return calibration string if success, otherwise, return an empty string.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetZeroCalibrationName(Advantech.Adam.Adam5000Type,System.Byte)">
            <summary>
            Get the zero calibration apply string
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <param name="i_byRange">The range code</param>
            <returns>Return calibration string if success, otherwise, return an empty string.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetAdam6022RangeCode(System.Int32)">
            <summary>
            Get the ADAM-6022 range code.
            </summary>
            <param name="i_iIndex">The range code index. The value is between 0~9.</param>
            <returns>The range code.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetAdam6022RangeIndex(System.Byte)">
            <summary>
            Get the ADAM-6022 range code index
            </summary>
            <param name="i_byRange">The range code</param>
            <returns>The range index, base-0. If the range is not defined, then return -1.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetAdam6022RangeName(System.Byte)">
            <summary>
            Get the ADAM-6022 range name.
            </summary>
            <param name="i_byRange">The range code.</param>
            <returns>The range name.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetAdam6022ScaledValue(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <param name="i_iValue"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetAdam6024RangeCode(System.Int32)">
            <summary>
            Get the ADAM-6024 range code.
            </summary>
            <param name="i_iIndex">The range code index. The value is between 0~9.</param>
            <returns>The range code.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetAdam6024RangeIndex(System.Byte)">
            <summary>
            Get the ADAM-6024 range code index
            </summary>
            <param name="i_byRange">The range code</param>
            <returns>The range index, base-0. If the range is not defined, then return -1.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetAdam6024RangeName(System.Byte)">
            <summary>
            Get the ADAM-6024 range name.
            </summary>
            <param name="i_byRange">The range code.</param>
            <returns>The range name.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetAdam6024ScaledValue(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="i_byRange"></param>
            <param name="i_iValue"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetScaledValue(Advantech.Adam.Adam6000Type,System.Byte,System.Int32)">
            <summary>
            Get the scaled value
            </summary>
            <param name="Adam6000Type">ADAM-6000 type</param>
            <param name="i_byRange">The range code</param>
            <param name="i_iValue">The value that is read by Modbus.</param>
            <returns>Return scaled value if success, otherwise, return 0.0</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetRangeCode(Advantech.Adam.Adam6000Type,System.Int32)">
            <summary>
            Get the range code
            </summary>
            <param name="Adam6000Type">ADAM-6000 type</param>
            <param name="i_iIndex">The range code index</param>
            <returns>Return range code if success, otherwise, return 255</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetRangeName(Advantech.Adam.Adam6000Type,System.Byte)">
            <summary>
            Get the range name
            </summary>
            <param name="Adam6000Type">ADAM-6000 type</param>
            <param name="i_byRange">The range code.</param>
            <returns>Return range code if success, otherwise, return 255</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetRangeIndex(Advantech.Adam.Adam6000Type,System.Byte)">
            <summary>
            Get the range code index
            </summary>
            <param name="Adam6000Type">ADAM-6000 type</param>
            <param name="i_byRange">The range code index.</param>
            <returns>Return range code index if success, otherwise, return -1</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetChannelTotal(Advantech.Adam.Adam6000Type)">
            <summary>
            Get the channel total
            </summary>
            <param name="Adam6000Type">ADAM-6000 type</param>
            <returns>Return channel total if success, otherwise, return 0.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetRangeTotal(Advantech.Adam.Adam6000Type)">
            <summary>
            Get the range total
            </summary>
            <param name="Adam6000Type">ADAM-6000 type</param>
            <returns>Return range total if success, otherwise, return 0.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetFloatFormat(Advantech.Adam.Adam6000Type,System.Byte)">
            <summary>
            Get floating format
            </summary>
            <param name="Adam6000Type">ADAM-6000 type</param>
            <param name="i_byRange">The rnage code</param>
            <returns>Return the float format string.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetUnitName(Advantech.Adam.Adam6000Type,System.Byte)">
            <summary>
            Get unit string
            </summary>
            <param name="Adam6000Type">ADAM-6000 type</param>
            <param name="i_byRange">The range code</param>
            <returns>Return unit string if success, otherwise, return an empty string.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetSpanCalibrationName(Advantech.Adam.Adam6000Type,System.Byte)">
            <summary>
            Get the span calibration apply string
            </summary>
            <param name="Adam6000Type">ADAM-6000 type</param>
            <param name="i_byRange">The range code</param>
            <returns>Return calibration string if success, otherwise, return an empty string.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetZeroCalibrationName(Advantech.Adam.Adam6000Type,System.Byte)">
            <summary>
            Get the zero calibration apply string
            </summary>
            <param name="Adam6000Type">ADAM-6000 type</param>
            <param name="i_byRange">The range code</param>
            <returns>Return calibration string if success, otherwise, return an empty string.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetExcitationValue(System.Single@)">
            <summary>
            Support module: ADAM-4016.
            Get module excitation output value.
            </summary>
            <param name="o_fValue">The last output value</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.SetExcitationValue(System.Single)">
            <summary>
            Support module: ADAM-4016.
            Set the excitation output value
            </summary>
            <param name="i_fValue">The value to output. The value is form 0.0~10.0</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.SetExcitationToStartup">
            <summary>
            Support module: ADAM-4016.
            Set the present output value as startup value
            </summary>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.SetExcitationCalibrationCounts(System.Int32)">
            <summary>
            Support module: ADAM-4016.
            Set the counts to adjust output value. 
            Each count is about 1.0 mV.
            </summary>
            <param name="i_iCount">The counts to set. The range is from -128~127.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.SetExcitationSpanCalibration">
            <summary>
            Support module: ADAM-4016.
            Set analog output Span calibration
            </summary>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.SetExcitationZeroCalibration">
            <summary>
            Support module: ADAM-4016.
            Set analog output Zero calibration
            </summary>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetCurrentValue(System.Byte,System.Single@)">
            <summary>
            Support module: ADAM-4021.
            Get module last analog output value by different data format.
            </summary>
            <param name="i_byFormat">The data format.</param>
            <param name="o_fValue">The last output value</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.SetCurrentValue(System.Byte,System.Single)">
            <summary>
            Support module: ADAM-4021.
            Set the current output value by different data format.
            </summary>
            <param name="i_byFormat">The data format.</param>
            <param name="i_fValue">The value to output</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.Set20mACalibration">
            <summary>
            Support module: ADAM-4021.
            Set analog output Span calibration
            </summary>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.Set4mACalibration">
            <summary>
            Support module: ADAM-4021.
            Set analog output Zero calibration
            </summary>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.SetCurrentToStartup">
            <summary>
            Support module: ADAM-4021.
            Set the present output value as startup value
            </summary>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.SetCalibrationCounts(System.Int32)">
            <summary>
            Support module: ADAM-4021.
            Set the counts to adjust output value. 
            Each count is about 1.5uA.
            </summary>
            <param name="i_iCount">The counts to set. The range is from -95~95.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetValue(System.Int32,System.Single@)">
            <summary>
            Support module: ADAM-4022T.
            Get module analog output value.
            </summary>
            <param name="i_iChannel">The channel index. The value is between 0~1.</param>
            <param name="o_fValue">The last output value</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.SetValue(System.Int32,System.Single)">
            <summary>
            Support module: ADAM-4022T.
            Set the output value
            </summary>
            <param name="i_iChannel">The channel index. The value is between 0~1.</param>
            <param name="i_fValue">The value to output</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetRange(System.Int32,System.Byte@)">
            <summary>
            Support module: ADAM-4022T.
            Get module analog Output range
            </summary>
            <param name="i_iChannel">The channel index. The value is between 0~1.</param>
            <param name="o_byRange">The Output range code</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.SetRange(System.Int32,System.Byte)">
            <summary>
            Support module: ADAM-4022T.
            Set module analog Output range
            </summary>
            <param name="i_iChannel">The channel index. The value is between 0~1</param>
            <param name="i_byRange">The Output range code</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetCurrentValue(System.Int32,System.Single@)">
            <summary>
            Support module: ADAM-4024.
            Get module last analog output value by different data format.
            </summary>
            <param name="i_iChannel">The channel index.</param>
            <param name="o_fValue">The last output value</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.SetCurrentValue(System.Int32,System.Single)">
            <summary>
            Support module: ADAM-4024.
            Set the current output value
            </summary>
            <param name="i_iChannel">The channel index. The value is between 0~7</param>
            <param name="i_fValue">The value to output</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetStartupValue(System.Int32,System.Single@)">
            <summary>
            Support module: ADAM-4024.
            Get analog output startup value
            </summary>
            <param name="i_iChannel">The channel index. The value is between 0~3</param>
            <param name="o_fValue">The startup output value</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.SetStartupValue(System.Int32,System.Single)">
            <summary>
            Support module: ADAM-4024.
            Set the startup value
            </summary>
            <param name="i_iChannel">The channel index. The value is between 0~3.</param>
            <param name="i_fValue">The startup output value.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetEmergencyValue(System.Int32,System.Single@)">
            <summary>
            Support module: ADAM-4024.
            Get analog output Emergency value
            </summary>
            <param name="i_iChannel">The channel index. The value is between 0~3</param>
            <param name="o_fValue">The emergency output value</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.SetEmergencyValue(System.Int32,System.Single)">
            <summary>
            Support module: ADAM-4024.
            Set the emergency value
            </summary>
            <param name="i_iChannel">The channel index. The value is between 0~3.</param>
            <param name="i_fValue">The emergency output value.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetOutputRange(System.Int32,System.Byte@)">
            <summary>
            Support module: ADAM-4024.
            Get module analog Output range
            </summary>
            <param name="i_iChannel">The channel index. The value is between 0~3</param>
            <param name="o_byRange">The Output range code</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.SetOutputRange(System.Int32,System.Byte)">
            <summary>
            Support module: ADAM-4024.
            Set module analog Output range
            </summary>
            <param name="i_iChannel">The channel index. The value is between 0~3</param>
            <param name="i_byRange">The Output range code</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.Set20mACalibration(System.Int32)">
            <summary>
            Support module: ADAM-4024.
            Set analog output 20 mA calibration
            </summary>
            <param name="i_iChannel">The channel index. The value is between 0~3</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.Set4mACalibration(System.Int32)">
            <summary>
            Support module: ADAM-4024.
            Set analog output 4 mA calibration
            </summary>
            <param name="i_iChannel">The channel index. The value is between 0~3</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.SetCalibrationCounts(System.Int32,System.Int32)">
            <summary>
            Support module: ADAM-4024.
            Set the counts to adjust output value. 
            </summary>
            <param name="i_iChannel">The channel index.</param>
            <param name="i_iCount">The counts to set. The range is from -127~127.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetEmergencyFlag(System.Int32,System.Boolean@)">
            <summary>
            Support module: ADAM-4024.
            Get module emergency flag.
            </summary>
            <param name="i_iChannel">The channel index. The value is between 0~3.</param>
            <param name="o_bFlag">The emergency flag. If the flag is true, the AO will output the emergency value when corresponded DI is On.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetEmergencyDI(System.Int32,System.Boolean[]@)">
            <summary>
            Support module: ADAM-4024.
            Get emergency DI status that is used for the AO.
            </summary>
            <param name="i_iChannelTotal">The total of the DI channel on the module.</param>
            <param name="o_bDI">The emergency DI status.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.SetEmergencyFlag(System.Int32,System.Boolean)">
            <summary>
            Support module: ADAM-4024.
            Set emergency flag.
            </summary>
            <param name="i_iChannel">The channel index. The value is between 0~3</param>
            <param name="i_bFlag">The emergency flag. Set to true, then the AO will output the emergency value when corresponded DI is On.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetCurrentValue(System.Int32,System.Int32,System.Single@)">
            <summary>
            Support module: ADAM-5024 on ADAM-5000.
            Get module last analog output value
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="i_iChannel">The channel index. The value is between 0~7</param>
            <param name="o_fValue">The last output value</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetConfiguration(System.Int32,System.Int32,System.Byte@,System.Byte@)">
            <summary>
            Support module: ADAM-5024 on ADAM-5000.
            Get module analog output range
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="i_iChannel">The channel index. The value is between 0~7</param>
            <param name="o_byRange">The input range code</param>
            <param name="o_bySlewrate">The slew rate code.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.SetConfiguration(System.Int32,System.Int32,System.Byte,System.Byte)">
            <summary>
            Support module: ADAM-5024 on ADAM-5000.
            Set module analog output range
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="i_iChannel">The channel index. The value is between 0~7</param>
            <param name="i_byRange">The input range code</param>
            <param name="i_bySlew">The slew rate code.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetConfiguration(System.Int32,System.Int32,System.Byte@)">
            <summary>
            Support module: ADAM-5024 on ADAM-5000/TCP.
            Get module analog output range
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="i_iChannel">The channel index. The value is between 0~7</param>
            <param name="o_byRange">The input range code</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.SetConfiguration(System.Int32,System.Int32,System.Byte)">
            <summary>
            Support module: ADAM-5024 on ADAM-5000/TCP.
            Set module analog output range
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="i_iChannel">The channel index. The value is between 0~7</param>
            <param name="i_byRange">The input range code</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.SetSpanCalibration(System.Int32,System.Int32)">
            <summary>
            Support module: ADAM-5024.
            Set analog output Span calibration
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="i_iChannel">The channel index. The value is between 0~7</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.SetZeroCalibration(System.Int32,System.Int32)">
            <summary>
            Support module: ADAM-5024.
            Set analog output Zero calibration
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="i_iChannel">The channel index. The value is between 0~7</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetStartupValue(System.Int32,System.Int32,System.Single@)">
            <summary>
            Support module: ADAM-5024.
            Get analog output startup value
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="i_iChannel">The channel index. The value is between 0~7</param>
            <param name="o_fValue">The startup output value</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.SetCurrentToStartup(System.Int32,System.Int32)">
            <summary>
            Support module: ADAM-5024.
            Set the current output value as startup value
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="i_iChannel">The channel index. The value is between 0~7</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.SetCurrentValue(System.Int32,System.Int32,System.Single)">
            <summary>
            Support module: ADAM-5024.
            Set the current output value
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="i_iChannel">The channel index. The value is between 0~7</param>
            <param name="i_fValue">The value to output</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.SetCalibrationCounts(System.Int32,System.Int32,System.Int32)">
            <summary>
            Support module: ADAM-5024.
            Set the counts to adjust output value. 
            Each count is about 1.5uA.
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="i_iChannel">The channel index. The value is between 0~7</param>
            <param name="i_iCount">The counts to set. The range is from -95~95.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetConfiguration(System.Int32,System.Byte@)">
            <summary>
            Support module: ADAM-6022, ADAM-6024.
            Get module analog output range
            </summary>
            <param name="i_iChannel">The channel index. The value is between 0~1</param>
            <param name="o_byRange">The input range code</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.SetConfiguration(System.Int32,System.Byte)">
            <summary>
            Support module: ADAM-6022, ADAM-6024.
            Set module analog output range
            </summary>
            <param name="i_iChannel">The channel index. The value is between 0~1</param>
            <param name="i_byRange">The input range code</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetSpanCalibrationRaw(System.Int32,System.Int32@)">
            <summary>
            Support module: ADAM-4022T, ADAM-6022, ADAM-6024.
            Get analog output Span calibration raw data
            </summary>
            <param name="i_iChannel">The channel index. The value is between 0~1</param>
            <param name="o_iRawData">The raw analog output data, range is from 0~4095</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.SetSpanCalibrationRaw(System.Int32,System.Int32)">
            <summary>
            Support module: ADAM-4022T, ADAM-6022, ADAM-6024.
            Set analog output Span calibration raw data
            </summary>
            <param name="i_iChannel">The channel index. The value is between 0~1</param>
            <param name="i_iRawData">The raw analog output data, range is from 0~4095</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetZeroCalibrationRaw(System.Int32,System.Int32@)">
            <summary>
            Support module: ADAM-4022T, ADAM-6022, ADAM-6024.
            Get analog output Zero calibration raw data
            </summary>
            <param name="i_iChannel">The channel index. The value is between 0~1</param>
            <param name="o_iRawData">The raw analog output data, range is from 0~4095</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.SetZeroCalibrationRaw(System.Int32,System.Int32)">
            <summary>
            Support module: ADAM-4022T, ADAM-6022, ADAM-6024.
            Set analog output Zero calibration raw data
            </summary>
            <param name="i_iChannel">The channel index. The value is between 0~1</param>
            <param name="i_iRawData">The raw analog output data, range is from 0~4095</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.SetCalibrationRawOutput(System.Int32,System.Int32)">
            <summary>
            Support module: ADAM-4022T, ADAM-6022, ADAM-6024.
            Output analog uses raw data.
            </summary>
            <param name="i_iChannel">The channel index. The value is between 0~1</param>
            <param name="i_iRawData">The raw analog output data, range is from 0~4095</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.GetStartupValue(System.Int32,System.Int32@)">
            <summary>
            Support module: ADAM-6022, ADAM-6024.
            Get analog output startup value
            </summary>
            <param name="i_iChannel">The channel index. The value is between 0~1</param>
            <param name="o_iValue">The startup output value, ranged from 0x000(0) to 0xFFF(4095)</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.AnalogOutput.SetStartupValue(System.Int32,System.Int32)">
            <summary>
            Support module: ADAM-6022, ADAM-6024.
            Set the analog output startup value
            </summary>
            <param name="i_iChannel">The channel index. The value is between 0~1</param>
            <param name="i_iValue">The startup output value, ranged from 0x000(0) to 0xFFF(4095)</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="T:Advantech.Adam.Adam_EventType">
            <summary>
            The event monitoring type used in event trigger
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_EventType.Dio_OffToOn">
            <summary>
            DIO Off to On event type
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_EventType.Dio_OnToOff">
            <summary>
            DIO On to Off event type
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_EventType.Alarm_OffToOn">
            <summary>
            ALARM Off to On event type
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_EventType.Alarm_OnToOff">
            <summary>
            ALARM On to Off event type
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_EventType.Unknown">
            <summary>
            Unknown event type
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam_Baudrate">
            <summary>
            The baudrate for ADAM-4000, ADAM-5000
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_Baudrate.Baud_1200">
            <summary>
            Baudrate 1200
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_Baudrate.Baud_2400">
            <summary>
            Baudrate 2400
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_Baudrate.Baud_4800">
            <summary>
            Baudrate 4800
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_Baudrate.Baud_9600">
            <summary>
            Baudrate 9600
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_Baudrate.Baud_19200">
            <summary>
            Baudrate 19200
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_Baudrate.Baud_38400">
            <summary>
            Baudrate 38400
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_Baudrate.Baud_57600">
            <summary>
            Baudrate 57600
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_Baudrate.Baud_115200">
            <summary>
            Baudrate 115200
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam4000_FreqGateTime">
            <summary>
            The frequency gate time for ADAM-4080, ADAM-4080D
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000_FreqGateTime.OneTenthSecond">
            <summary>
            Advantech ASCII command
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000_FreqGateTime.OneSecond">
            <summary>
            Modbus command
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000_FreqGateTime.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam4000_Protocol">
            <summary>
            The protocol for ADAM-4000
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000_Protocol.Advantech">
            <summary>
            Advantech ASCII command
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000_Protocol.Modbus">
            <summary>
            Modbus command
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000_Protocol.BACnet">
            <summary>
            BACnet protocol, only for ADAM-4022T
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4000_Protocol.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam_Checksum">
            <summary>
            The checksum status.
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_Checksum.Disable">
            <summary>
            ASCII command
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_Checksum.Enable">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam_Temperature">
            <summary>
            The temperature setting
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_Temperature.Centigrade">
            <summary>
            'C
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_Temperature.Fahrenheit">
            <summary>
            'F
            </summary>
        </member>
        <member name="T:Advantech.Adam.AdamWirelessAP">
            <summary>
            ADAM-6000W AP class
            </summary>
        </member>
        <member name="M:Advantech.Adam.AdamWirelessAP.#ctor">
            <summary>
            The AdamWirelessAP constructor
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamWirelessAP.SSID">
            <summary>
            The SSID.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamWirelessAP.MAC">
            <summary>
            The MAC address.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamWirelessAP.Channel">
            <summary>
            The channel.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamWirelessAP.Mode">
            <summary>
            The mode.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamWirelessAP.WepUsed">
            <summary>
            The WEP used.
            </summary>
        </member>
        <member name="P:Advantech.Adam.AdamWirelessAP.Strength">
            <summary>
            The strength.
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam4000Config">
            <summary>
            The ADAM-4000 configuration class.
            </summary>
        </member>
        <member name="M:Advantech.Adam.Adam4000Config.#ctor">
            <summary>
            Adam4000Config constructor
            </summary>
        </member>
        <member name="P:Advantech.Adam.Adam4000Config.Address">
            <summary>
            The module setup address.
            </summary>
        </member>
        <member name="P:Advantech.Adam.Adam4000Config.TypeCode">
            <summary>
            The input range code
            </summary>
        </member>
        <member name="P:Advantech.Adam.Adam4000Config.Baudrate">
            <summary>
            The baudrate.
            </summary>
        </member>
        <member name="P:Advantech.Adam.Adam4000Config.Status">
            <summary>
            The status byte.
            </summary>
        </member>
        <member name="P:Advantech.Adam.Adam4000Config.Format">
            <summary>
            The data format.
            </summary>
        </member>
        <member name="P:Advantech.Adam.Adam4000Config.FreqGateTime">
            <summary>
            The frequency gate time. (Only for ADAM-4080, ADAM-4080D)
            </summary>
        </member>
        <member name="P:Advantech.Adam.Adam4000Config.Protocol">
            <summary>
            The protocol. (Except ADAM-4024)
            </summary>
        </member>
        <member name="P:Advantech.Adam.Adam4000Config.Protocol4024">
            <summary>
            The protocol for ADAM-4024. (Only for ADAM-4024)
            </summary>
        </member>
        <member name="P:Advantech.Adam.Adam4000Config.Checksum">
            <summary>
            The checksum using.
            </summary>
        </member>
        <member name="P:Advantech.Adam.Adam4000Config.Integration">
            <summary>
            The integration time.
            </summary>
        </member>
        <member name="P:Advantech.Adam.Adam4000Config.Temperature">
            <summary>
            The temperature
            </summary>
        </member>
        <member name="P:Advantech.Adam.Adam4000Config.Slewrate">
            <summary>
            The slew rate for ADAM-4021, ADAM-4024
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam5000Config">
            <summary>
            The ADAM-5000 configuration class.
            </summary>
        </member>
        <member name="M:Advantech.Adam.Adam5000Config.#ctor">
            <summary>
            Adam5000Config constructor
            </summary>
        </member>
        <member name="P:Advantech.Adam.Adam5000Config.Baudrate">
            <summary>
            The baudrate.
            </summary>
        </member>
        <member name="P:Advantech.Adam.Adam5000Config.Status">
            <summary>
            The status byte.
            </summary>
        </member>
        <member name="P:Advantech.Adam.Adam5000Config.Checksum">
            <summary>
            The checksum using.
            </summary>
        </member>
        <member name="T:Advantech.Adam.Configuration">
            <summary>
            Configuration class for ADAM series running on ASCII command.
            </summary>
        </member>
        <member name="M:Advantech.Adam.Configuration.#ctor(Advantech.Adam.AdamCom)">
            <summary>
            The Configuration constructor
            </summary>
            <param name="i_com">The AdamCom object</param>
        </member>
        <member name="M:Advantech.Adam.Configuration.#ctor(Advantech.Adam.AdamSocket)">
            <summary>
            The Configuration constructor
            </summary>
            <param name="i_socket">The AdamSocket object</param>
        </member>
        <member name="M:Advantech.Adam.Configuration.GetBaudrateTotal">
            <summary>
            Get the baudrate total
            </summary>
            <returns>Return range total if success, otherwise, return 0.</returns>
        </member>
        <member name="M:Advantech.Adam.Configuration.GetBaudrateCode(System.Int32)">
            <summary>
            Get the baudrate code.
            </summary>
            <param name="i_iIndex">The baudrate index. The value is between 0~7.</param>
            <returns>The range code.</returns>
        </member>
        <member name="M:Advantech.Adam.Configuration.GetBaudrateIndex(System.Byte)">
            <summary>
            Get the baudrate index
            </summary>
            <param name="i_byBaudrate">The baudrate code.</param>
            <returns>Return range code index if success, otherwise, return -1</returns>
        </member>
        <member name="M:Advantech.Adam.Configuration.GetBaudrateName(System.Byte)">
            <summary>
            Get the baudrate name
            </summary>
            <param name="i_byBaudrate">The baudrate code.</param>
            <returns>Return range code if success, otherwise, return empty string.</returns>
        </member>
        <member name="M:Advantech.Adam.Configuration.GetModuleName(System.String@)">
            <summary>
            Support module: ADAM-4000, ADAM-5000, ADAM-5000TCP, ADAM-6000
            Get the ADAM mdoule name.
            </summary>
            <param name="o_szName">The module name</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Configuration.GetFirmwareVer(System.String@)">
            <summary>
            Support module: ADAM-4000, ADAM-5000, ADAM-5000TCP, ADAM-6000
            Get the ADAM mdoule firmware version.
            </summary>
            <param name="o_szVer">The firmware version.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Configuration.GetSlotInfo(System.String[]@)">
            <summary>
            Support module: ADAM-5000, ADAM-5000TCP
            Get the slot information
            </summary>
            <param name="o_szSlotInfo">Array of slot information.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Configuration.GetSlotInfo(Advantech.Adam.Adam5000Type[]@)">
            <summary>
            Support module: ADAM-5000, ADAM-5000TCP
            Get the slot information
            </summary>
            <param name="o_aSlotInfo">Array of slot information.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Configuration.GetWDTTimeout(System.Single@)">
            <summary>
            Support module: ADAM-4000
            Get WDT cycle time in seconds
            </summary>
            <param name="o_fWDTTimeout">The cycle time in seconds</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Configuration.SetWDTTimeout(System.Single)">
            <summary>
            Support module: ADAM-4000
            Set WDT cycle time in seconds
            </summary>
            <param name="i_fWDTTimeout">The cycle time in seconds, the range is from 0 to 999.9.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Configuration.GetCommunicationSafety(System.Single@)">
            <summary>
            Support module: ADAM-4024
            Get communication safety timeout in seconds
            </summary>
            <param name="o_fTimeout">The cycle time in seconds. The range is from 0.0~6553.5</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Configuration.SetCommunicationSafety(System.Single)">
            <summary>
            Support module: ADAM-4024
            Set communication safety timeout in seconds
            </summary>
            <param name="o_fTimeout">The cycle time in seconds, the range is from 0.0~6553.5.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Configuration.GetWDTTimeout(System.Int32@)">
            <summary>
            Support module: ADAM-5000, ADAM-5000TCP
            Get WDT timeout value in seconds
            </summary>
            <param name="o_iWDTTimeout">The timeout value in seconds</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Configuration.SetWDTTimeout(System.Int32)">
            <summary>
            Support module: ADAM-5000, ADAM-5000TCP
            Set WDT timeout value in seconds
            </summary>
            <param name="i_iWDTTimeout">The timeout value in seconds</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Configuration.GetWDTMask(System.Boolean[]@)">
            <summary>
            Support module: ADAM-5000, ADAM-5000TCP
            Get WDT timeout mask.
            </summary>
            <param name="o_bEnabled">The array of boolean values indicate the WDT mask for each slot</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Configuration.SetWDTMask(System.Boolean[])">
            <summary>
            Support module: ADAM-5000, ADAM-5000TCP
            Set WDT timeout mask.
            </summary>
            <param name="i_bEnabled">The array of boolean values indicate the WDT mask for each slot</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Configuration.GetDataStreamingIP(System.Int32,System.String@)">
            <summary>
            Support module: ADAM-5000TCP, ADAM-6000
            Get the IP address that set for data streaming receiver.
            </summary>
            <param name="i_iIndex">The receiver index, range from 0 to 7</param>
            <param name="o_szIP">The IP address of the receiver</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Configuration.SetDataStreamingIP(System.Int32,System.String)">
            <summary>
            Support module: ADAM-5000TCP, ADAM-6000
            Set the data streaming receiver's IP
            </summary>
            <param name="i_iIndex">The receiver index, range from 0 to 7</param>
            <param name="i_szIP">The IP address of the receiver</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Configuration.GetDataStreamingMask(System.Int32,System.Boolean@)">
            <summary>
            Support module: ADAM-5000TCP, ADAM-6000
            Get the enabled mask for data streaming receiver.
            </summary>
            <param name="i_iIndex">The receiver index, range from 0 to 7</param>
            <param name="o_bEnabled">The enabled mask</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Configuration.SetDataStreamingMask(System.Int32,System.Boolean)">
            <summary>
            Support module: ADAM-5000TCP, ADAM-6000
            Set the enabled mask for data streaming receiver.
            </summary>
            <param name="i_iIndex">The receiver index, range from 0 to 7</param>
            <param name="i_bEnabled">The enabled mask</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Configuration.GetDataStreamingInterval(System.Int32@)">
            <summary>
            Support module: ADAM-5000TCP, ADAM-6000
            Get the interval for data streaming sending 
            </summary>
            <param name="o_iInterval">The interval in millisecond</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Configuration.SetDataStreamingInterval(System.Int32)">
            <summary>
            Support module: ADAM-5000TCP, ADAM-6000
            Set the interval for data streaming sending
            </summary>
            <param name="i_iInterval">The interval in millisecond</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Configuration.GetEventTriggerMask(Advantech.Adam.Adam_EventType,System.Boolean[]@)">
            <summary>
            Support module: ADAM-5000TCP, ADAM-6000
            Get the event trigger mask for all channels
            </summary>
            <param name="i_Type">The event type</param>
            <param name="o_bEnabled">The event mask. 
            For ADAM-5000TCP, 16 channels are used for each slot, 8 slots for an ADAM-5000TCP.
            </param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Configuration.SetEventTriggerMask(Advantech.Adam.Adam_EventType,System.Boolean[])">
            <summary>
            Support module: ADAM-5000TCP, ADAM-6000
            Set the event trigger mask for all channels
            </summary>
            <param name="i_Type">The event type</param>
            <param name="i_bEnabled">The event mask
            For ADAM-5000TCP, 16 channels are used for each slot, 8 slots for an ADAM-5000TCP.
            </param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.Configuration.GetEventTriggerMask(Advantech.Adam.Adam_EventType,System.String@)">
            <summary>
            Support module: ADAM-5000TCP, ADAM-6000
            Get the event trigger mask for all channels
            </summary>
            <param name="i_Type">The event type</param>
            <param name="o_szMask">The event mask string
            For ADAM-5000TCP, 4 HEX characters are used for each slots, 8 slots for an ADAM-5000TCP.
            </param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Configuration.SetEventTriggerMask(Advantech.Adam.Adam_EventType,System.String)">
            <summary>
            Support module: ADAM-5000TCP, ADAM-6000
            Set the event trigger mask for all channels
            </summary>
            <param name="i_Type">The event type</param>
            <param name="i_szMask">The event mask string
            For ADAM-5000TCP, 4 HEX characters are used for each slots, 8 slots for an ADAM-5000TCP.
            </param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Configuration.IsValidPassword(System.String)">
            <summary>
            Support module: ADAM-5000TCP, ADAM-6000
            Validate the password.
            This command only supports TCP connection, DO NOT USE UDP!
            </summary>
            <param name="i_szPassword">The password string, maximum length is 8.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Configuration.ChangePassword(System.String,System.String)">
            <summary>
            Support module: ADAM-5000TCP, ADAM-6000
            Change the password.
            This command only supports TCP connection, DO NOT USE UDP!
            </summary>
            <param name="i_szOldPassword">The old password.</param>
            <param name="i_szNewPassword">The new password</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Configuration.ResetPassword">
            <summary>
            Support module: ADAM-6000
            Reset the password to "00000000"
            This command only supports TCP connection, DO NOT USE UDP!
            </summary>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Configuration.GetWirelessAPTotal(System.Int32@)">
            <summary>
            Support module: ADAM-6000W
            Get wireless AP total.
            </summary>
            <param name="o_iTotal">The total number of AP.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Configuration.GetWirelessAPInfo(System.Int32,Advantech.Adam.AdamWirelessAP@)">
            <summary>
            Support module: ADAM-6000W
            Get AP information by index.
            </summary>
            <param name="i_iIndex">The index of the AP.</param>
            <param name="o_objAP">The AP object.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Configuration.GetModuleConfig(Advantech.Adam.Adam4000Config@)">
            <summary>
            Support module: ADAM-4000
            Get module configuration.
            </summary>
            <param name="o_objCon">The ADAM4000Config object.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Configuration.SetModuleConfig(Advantech.Adam.Adam4000Config)">
            <summary>
            Support module: ADAM-4000
            Set module configuration.
            </summary>
            <param name="o_objCon">The ADAM4000Config object.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Configuration.GetModuleConfig(Advantech.Adam.Adam5000Config@)">
            <summary>
            Support module: ADAM-5000
            Get module configuration.
            </summary>
            <param name="o_objCon">The ADAM5000Config object.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Configuration.SetModuleConfig(Advantech.Adam.Adam5000Config)">
            <summary>
            Support module: ADAM-5000
            Set module configuration.
            </summary>
            <param name="o_objCon">The ADAM5000Config object.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="T:Advantech.Adam.Adam4080_InputSignalMode">
            <summary>
            Adam4080 input signal mode
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4080_InputSignalMode.NonIsolated">
            <summary>
            Non-isolated(TTL) input signal
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4080_InputSignalMode.PhotoIsolated">
            <summary>
            Photo-isolated input signal
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4080_InputSignalMode.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam4080D_LedSource">
            <summary>
            Adam4080D LED source
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4080D_LedSource.Channel0">
            <summary>
            From channel 0
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4080D_LedSource.Channel1">
            <summary>
            From channel 1
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4080D_LedSource.Host">
            <summary>
            From the host computer
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4080D_LedSource.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam4080_CounterMode">
            <summary>
            Adam4080 counter mode
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4080_CounterMode.Counter">
            <summary>
            Counter mode
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4080_CounterMode.Frequency">
            <summary>
            Frequency mode
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4080_CounterMode.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam4080_GateMode">
            <summary>
            Adam4080 gate mode
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4080_GateMode.Low">
            <summary>
            Low mode
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4080_GateMode.High">
            <summary>
            High mode
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4080_GateMode.Disable">
            <summary>
            Disable
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4080_GateMode.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam4080_Level">
            <summary>
            Adam4080 level
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4080_Level.Low">
            <summary>
            Low level
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4080_Level.High">
            <summary>
            High level
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam4080_Level.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam5080_CounterMode">
            <summary>
            Adam5080 counter mode
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5080_CounterMode.Bi_Direction">
            <summary>
            Bi-directory mode
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5080_CounterMode.Up_Down">
            <summary>
            Up/Down mode
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5080_CounterMode.Frequency">
            <summary>
            Frequency mode
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam5080_CounterMode.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:Advantech.Adam.Adam6051_CounterMode">
            <summary>
            Adam6051 counter mode
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6051_CounterMode.Counter">
            <summary>
            Counter mode
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6051_CounterMode.Frequency">
            <summary>
            Frequency mode
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam6051_CounterMode.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:Advantech.Adam.Counter">
            <summary>
            Summary description for Counter.
            </summary>
        </member>
        <member name="M:Advantech.Adam.Counter.#ctor(Advantech.Adam.AdamCom)">
            <summary>
            The DigitalInput constructor.
            </summary>
            <param name="i_com">The AdamCom object</param>
        </member>
        <member name="M:Advantech.Adam.Counter.#ctor(Advantech.Adam.AdamSocket)">
            <summary>
            The DigitalInput constructor.
            </summary>
            <param name="i_socket">The AdamSocket object</param>
        </member>
        <member name="M:Advantech.Adam.Counter.GetModeName(Advantech.Adam.Adam4000Type,System.Byte)">
            <summary>
            Get the counter mode name
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <param name="i_byMode">The mode code.</param>
            <returns>Return counter mode string if success, otherwise, return empty string</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetChannelTotal(Advantech.Adam.Adam4000Type)">
            <summary>
            Get the channel total
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <returns>Return channel total if success, otherwise, return 0.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetModeTotal(Advantech.Adam.Adam4000Type)">
            <summary>
            Get the range total
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <returns>Return mode total if success, otherwise, return 0.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetFormat(Advantech.Adam.Adam4000Type,System.Byte)">
            <summary>
            Get value format
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <param name="i_byMode">The range code</param>
            <returns>Return the format string.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetUnitName(Advantech.Adam.Adam4000Type,System.Byte)">
            <summary>
            Get unit string
            </summary>
            <param name="adam4000Type">ADAM-4000 type</param>
            <param name="i_byMode">The mode code</param>
            <returns>Return unit string if success, otherwise, return an empty string.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetAdam5080ModeName(System.Byte)">
            <summary>
            
            </summary>
            <param name="i_byMode"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetAdam5080ScaledValue(System.Byte,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="i_byMode"></param>
            <param name="i_iHigh"></param>
            <param name="i_iLow"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetScaledValue(Advantech.Adam.Adam5000Type,System.Byte,System.Int32,System.Int32)">
            <summary>
            Get the scaled value
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <param name="i_byMode">The mode code</param>
            <param name="i_iHigh">The value that is read by Modbus.</param>
            <param name="i_iLow">The value that is read by Modbus.</param>
            <returns>Return scaled value if success, otherwise, return 0.0</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetModeName(Advantech.Adam.Adam5000Type,System.Byte)">
            <summary>
            Get the counter mode name
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <param name="i_byMode">The mode code.</param>
            <returns>Return counter mode string if success, otherwise, return empty string</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetChannelTotal(Advantech.Adam.Adam5000Type)">
            <summary>
            Get the channel total
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <returns>Return channel total if success, otherwise, return 0.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetModeTotal(Advantech.Adam.Adam5000Type)">
            <summary>
            Get the range total
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <returns>Return mode total if success, otherwise, return 0.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetFormat(Advantech.Adam.Adam5000Type,System.Byte)">
            <summary>
            Get value format
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <param name="i_byMode">The range code</param>
            <returns>Return the format string.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetUnitName(Advantech.Adam.Adam5000Type,System.Byte)">
            <summary>
            Get unit string
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <param name="i_byMode">The mode code</param>
            <returns>Return unit string if success, otherwise, return an empty string.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetDataFormatTotal(Advantech.Adam.Adam5000Type)">
            <summary>
            Get the data format total
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <returns>Return range total if success, otherwise, return 0.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetDataFormatCode(Advantech.Adam.Adam5000Type,System.Int32)">
            <summary>
            Get the data format code.
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <param name="i_iIndex">The data format index. The value is between 0~1.</param>
            <returns>The range code.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetDataFormatIndex(Advantech.Adam.Adam5000Type,System.Byte)">
            <summary>
            Get the data format index
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <param name="i_byDataFormat">The data format code.</param>
            <returns>Return range code index if success, otherwise, return -1</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetDataFormatName(Advantech.Adam.Adam5000Type,System.Byte)">
            <summary>
            Get the data format name
            </summary>
            <param name="adam5000Type">ADAM-5000 type</param>
            <param name="i_byDataFormat">The data format code.</param>
            <returns>Return range code if success, otherwise, return empty string.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetAdam6051ModeName(System.Byte)">
            <summary>
            
            </summary>
            <param name="i_byMode"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetAdam6051ScaledValue(System.Byte,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="i_byMode"></param>
            <param name="i_iHigh"></param>
            <param name="i_iLow"></param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetModeName(Advantech.Adam.Adam6000Type,System.Byte)">
            <summary>
            Support module: ADAM-6051.
            Get the range name
            </summary>
            <param name="adam6000Type">ADAM-6000 type</param>
            <param name="i_byMode">The mode code.</param>
            <returns>Return range code if success, otherwise, return empty string</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetChannelTotal(Advantech.Adam.Adam6000Type)">
            <summary>
            Support module: ADAM-6051.
            Get the channel total
            </summary>
            <param name="adam6000Type">ADAM-6000 type</param>
            <returns>Return channel total if success, otherwise, return 0.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetChannelStart(Advantech.Adam.Adam6000Type)">
            <summary>
            Support module: ADAM-6051.
            Get the counter channel start index from IO config array.
            </summary>
            <param name="adam6000Type">The adam6000Type.</param>
            <returns>The counter channel start index.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetScaledValue(Advantech.Adam.Adam6000Type,System.Byte,System.Int32,System.Int32)">
            <summary>
            Support module: ADAM-6051.
            Get the scaled value
            </summary>
            <param name="adam6000Type">ADAM-6000 type</param>
            <param name="i_byMode">The mode code</param>
            <param name="i_iHigh">The value that is read by Modbus.</param>
            <param name="i_iLow">The value that is read by Modbus.</param>
            <returns>Return scaled value if success, otherwise, return 0.0</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetModeTotal(Advantech.Adam.Adam6000Type)">
            <summary>
            Support module: ADAM-6051.
            Get the range total
            </summary>
            <param name="adam6000Type">ADAM-6000 type</param>
            <returns>Return mode total if success, otherwise, return 0.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetFormat(Advantech.Adam.Adam6000Type,System.Byte)">
            <summary>
            Support module: ADAM-6051.
            Get value format
            </summary>
            <param name="adam6000Type">ADAM-6000 type</param>
            <param name="i_byMode">The range code</param>
            <returns>Return the format string.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetUnitName(Advantech.Adam.Adam6000Type,System.Byte)">
            <summary>
            Support module: ADAM-6051.
            Get unit string
            </summary>
            <param name="adam6000Type">ADAM-6000 type</param>
            <param name="i_byMode">The mode code</param>
            <returns>Return unit string if success, otherwise, return an empty string.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.ParseIOConfig(System.Byte,System.Byte@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Support module: ADAM-6051.
            Parse the counter configuration byte.
            </summary>
            <param name="i_byConfig">The configuration byte.</param>
            <param name="o_byMode">The counter mode.</param>
            <param name="o_bRecordLastCount">The record last count status.</param>
            <param name="o_bDigitalFilter">The digital filter enable status.</param>
            <param name="o_bInvert">The invert enable status.</param>
        </member>
        <member name="M:Advantech.Adam.Counter.FormIOConfig(System.Byte,System.Boolean,System.Boolean,System.Boolean,System.Byte@)">
            <summary>
            Support module: ADAM-6000.
            Form the DI configuration byte.
            </summary>
            <param name="i_byMode">The DI mode.</param>
            <param name="i_bRecordLastCount">The record last count status.</param>
            <param name="i_bDigitalFilter">The digital filter enable status.</param>
            <param name="i_bInvert">The invert enable status.</param>
            <param name="o_byConfig">The configuration byte.</param>
        </member>
        <member name="M:Advantech.Adam.Counter.GetValue(System.Int64@)">
            <summary>
            Support module: ADAM-4011, ADAM-4011D, ADAM-4012, ADAM-4016.
            Get event counter value.
            </summary>
            <param name="o_lValue">The counter value.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.SetClear">
            <summary>
            Support module: ADAM-4011, ADAM-4011D, ADAM-4012, ADAM-4016.
            Clear the event counter value.
            </summary>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetInputSignalMode(System.Byte@)">
            <summary>
            Support module: ADAM-4080, ADAM-4080D
            Get the input signal mode.
            </summary>
            <param name="o_byMode">The input signal mode.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.SetInputSignalMode(System.Byte)">
            <summary>
            Support module: ADAM-4080, ADAM-4080D
            Set the input signal mode.
            </summary>
            <param name="i_byMode">The input signal mode.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetLEDSource(System.Byte@)">
            <summary>
            Support module: ADAM-4080D
            Get the LED source.
            </summary>
            <param name="o_bySource">The LED source.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.SetLEDSource(System.Byte)">
            <summary>
            Support module: ADAM-4080D
            Set the LED source.
            </summary>
            <param name="i_bySource">The LED source.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.SetLEDText(System.String)">
            <summary>
            Support module: ADAM-4080D
            Set the LED text
            </summary>
            <param name="i_szText">The text to be shown. The length of the text must be six. 
            The string must be numric or dot characters.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetValue(System.Int32,System.Int64@)">
            <summary>
            Support module: ADAM-4080, ADAM-4080D.
            Get the counter/frequency value
            </summary>
            <param name="i_iChannel">The channel index. The value is between 0~1.</param>
            <param name="o_lValue">The counter/frequency value.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetMaxValue(System.Int32,System.Int64@)">
            <summary>
            Support module: ADAM-4080, ADAM-4080D.
            Get the counter/frequency maximum value.
            </summary>
            <param name="i_iChannel">The channel index. The value is between 0~1.</param>
            <param name="o_lValue">The counter/frequency value.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.SetMaxValue(System.Int32,System.Int64)">
            <summary>
            Support module: ADAM-4080, ADAM-4080D.
            Set the counter/frequency maximum value.
            </summary>
            <param name="i_iChannel">The channel index. The value is between 0~1.</param>
            <param name="i_lValue">The counter/frequency value.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetGateMode(System.Byte@)">
            <summary>
            Support module: ADAM-4080, ADAM-4080D.
            Get the gate mode.
            </summary>
            <param name="o_byMode">The gate mode.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.SetGateMode(System.Byte)">
            <summary>
            Support module: ADAM-4080, ADAM-4080D.
            Set the gate mode.
            </summary>
            <param name="i_byMode">The gate mode.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetStatus(System.Int32,System.Boolean@)">
            <summary>
            Support module: ADAM-4080, ADAM-4080D.
            Get the counter status.
            </summary>
            <param name="i_iChannel">The channel index. The value is between 0~1</param>
            <param name="o_bCounting">The counter status. True if the counter is counting. Otherwise false.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.SetStatus(System.Int32,System.Boolean)">
            <summary>
            Support module: ADAM-4080, ADAM-4080D.
            Set the counter status.
            </summary>
            <param name="i_iChannel">The channel index. The value is between 0~1</param>
            <param name="i_bCounting">The counter status. True if the counter starts counting. Otherwise false.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.SetClear(System.Int32)">
            <summary>
            Support module: ADAM-4080, ADAM-4080D.
            Clear the counter value.
            </summary>
            <param name="i_iChannel">The channel index. The value is between 0~1</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetOverflowFlag(System.Int32,System.Boolean@)">
            <summary>
            Support module: ADAM-4080, ADAM-4080D.
            Get overflow flag
            </summary>
            <param name="i_iChannel">The channel index. The value is between 0~1</param>
            <param name="o_bOver">The overflow flag. True means overflow occurs.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetDigitalFilter(System.Boolean@)">
            <summary>
            Support module: ADAM-4080, ADAM-4080D.
            Get Digital filter status.
            </summary>
            <param name="o_bFilter">The digital filter status. True means filter is enabled.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.SetDigitalFilter(System.Boolean)">
            <summary>
            Support module: ADAM-4080, ADAM-4080D.
            Set Digital filter value.
            </summary>
            <param name="i_bFilter">The digital filter status. True means filter is enabled.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetMinInputSignalWidth(System.Byte,System.Int32@)">
            <summary>
            Support module: ADAM-4080, ADAM-4080D.
            Get the minimum input signal width.
            </summary>
            <param name="i_byLevel">The level. The value 0 means low. Otherwise means high.</param>
            <param name="o_iValue">The minimum input signal width. The unit is micro-second.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.SetMinInputSignalWidth(System.Byte,System.Int32)">
            <summary>
            Support module: ADAM-4080, ADAM-4080D.
            Set the minimum input signal width.
            </summary>
            <param name="i_byLevel">The level. The value 0 means low. Otherwise means high.</param>
            <param name="i_iValue">The minimum input signal width. The unit is micro-second. The range is between 2~65535.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetTriggerLevel(System.Byte,System.Single@)">
            <summary>
            Support module: ADAM-4080D.
            Get the trigger level for non-isolated input.
            </summary>
            <param name="i_byLevel">The level. The value 0 means low. Otherwise means high.</param>
            <param name="o_fValue">The trigger level. The range is between 0.1~5.0 voltage.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.SetTriggerLevel(System.Byte,System.Single)">
            <summary>
            Support module: ADAM-4080D.
            Set the trigger level for non-isolated input.
            </summary>
            <param name="i_byLevel">The level. The value 0 means low. Otherwise means high.</param>
            <param name="i_fValue">The trigger level. The range is between 0.1~5.0 voltage.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetStartupValue(System.Int32,System.Int64@)">
            <summary>
            Support module: ADAM-4080.
            Get the counter startup value.
            </summary>
            <param name="i_iChannel">The channel index. The value is between 0~1</param>
            <param name="o_lStartup">The startup value.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.SetStartupValue(System.Int32,System.Int64)">
            <summary>
            Support module: ADAM-4080.
            Set counter startup value.
            </summary>
            <param name="i_iChannel">The channel index. The value is between 0~1</param>
            <param name="i_lStartup">The startup value.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetValues(System.Int32,System.Byte,System.Double[]@)">
            <summary>
            Support module: ADAM-5080
            Get channel values
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="i_byMode">The counter mode.</param>
            <param name="o_dValues">Array of channel values.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetValue(System.Int32,System.Int32,System.Byte,System.Double@)">
            <summary>
            Support module: ADAM-5080
            Get specified channel value. The value returned is in engineering unit format.
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="i_iChannel">The channel index. The value is between 0~3</param>
            <param name="i_byMode">The counter mode.</param>
            <param name="o_dValue">The channel value.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetMode(System.Int32,System.Byte@)">
            <summary>
            Support module: ADAM-5080 on ADAM-5000/TCP.
            Get module counter mode.
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="o_byMode">The counter mode code.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.SetMode(System.Int32,System.Byte)">
            <summary>
            Support module: ADAM-5080 on ADAM-5000/TCP.
            Set module counter mode.
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="i_byMode">The counter mode code.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetModeFormat(System.Int32,System.Byte@,System.Byte@)">
            <summary>
            Support module: ADAM-5080 on ADAM-5000.
            Get module counter mode and data format.
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="o_byMode">The counter mode code.</param>
            <param name="o_byFormat">The data format code.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.SetModeFormat(System.Int32,System.Byte,System.Byte)">
            <summary>
            Support module: ADAM-5080 on ADAM-5000.
            Set module counter mode.
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="i_byMode">The counter mode code.</param>
            <param name="i_byFormat">The data format code.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetDigitalFilter(System.Int32,System.Int32@)">
            <summary>
            Support module: ADAM-5080 on ADAM-5000.
            Get Digital filter value.
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="o_iFilter">The digital filter value.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.SetDigitalFilter(System.Int32,System.Int32)">
            <summary>
            Support module: ADAM-5080 on ADAM-5000.
            Set Digital filter value.
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="i_iFilter">The digital filter value. The value is from 8~65000.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetStartupValue(System.Int32,System.Int32,System.Int64@)">
            <summary>
            Support module: ADAM-5080 on ADAM-5000.
            Get the counter startup value.
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="i_iChannel">The channel index. The value is between 0~7</param>
            <param name="o_lStartup">The startup value.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.SetStartupValue(System.Int32,System.Int32,System.Int64)">
            <summary>
            Support module: ADAM-5080 on ADAM-5000.
            Set counter startup value.
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="i_iChannel">The channel index. The value is between 0~7</param>
            <param name="i_lStartup">The startup value.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetOverflowFlag(System.Int32,System.Boolean[]@)">
            <summary>
            Support module: ADAM-5080 on ADAM-5000.
            Get overflow flag
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="o_bOver">The overflow flag. True means overflow occurs.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.SetToStartup(System.Int32,System.Int32)">
            <summary>
            Support module: ADAM-5080 on ADAM-5000.
            Force the counter value to startup value.
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="i_iChannel">The channel index. The value is between 0~7</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetStatus(System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Support module: ADAM-5080 on ADAM-5000.
            Get the counter status.
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="i_iChannel">The channel index. The value is between 0~7</param>
            <param name="o_bCounting">The counter status. True if the counter is counting. Otherwise false.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.SetStatus(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Support module: ADAM-5080 on ADAM-5000.
            Set the counter status.
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="i_iChannel">The channel index. The value is between 0~7</param>
            <param name="i_bCounting">The counter status. True if the counter is counting. Otherwise false.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetIOConfig(System.Byte[]@)">
            <summary>
            Support module: ADAM-6000.
            Get DIO configuration.
            </summary>
            <param name="o_byConfig">The configuration for all DIO channel.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.SetIOConfig(System.Byte[])">
            <summary>
            Support module: ADAM-6000.
            Set DIO configuration.
            </summary>
            <param name="i_byConfig">The configuration for all DIO channel.</param>
            <returns>True if succeed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Counter.GetDigitalFilterMiniSignalWidth(System.Int64[]@,System.Int64[]@)">
            <summary>
            Support module: ADAM-6000.
            Get digital filter minimum signal width.
            </summary>
            <param name="o_lHigh">The minimum high signal width.</param>
            <param name="o_lLow">The minimum low signal width.</param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.Counter.SetDigitalFilterMiniSignalWidth(System.Int64[],System.Int64[])">
            <summary>
            Support module: ADAM-6000.
            Set digital filter minimum signal width.
            </summary>
            <param name="i_lHigh">The minimum high signal width.</param>
            <param name="i_lLow">The minimum low signal width.</param>
            <returns></returns>
        </member>
        <member name="T:Advantech.Adam.Adam_DIMode">
            <summary>
            DI mode
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_DIMode.Di">
            <summary>
            Normal DI mode
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_DIMode.Counter">
            <summary>
            Counter mode
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_DIMode.LowToHighLatch">
            <summary>
            Low to high latch mode
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_DIMode.HighToLowLatch">
            <summary>
            High to low latch mode
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_DIMode.Frequency">
            <summary>
            Frequency mode
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_DIMode.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:Advantech.Adam.DigitalInput">
            <summary>
            DigitalInput class for ADAM series.
            </summary>
        </member>
        <member name="M:Advantech.Adam.DigitalInput.#ctor(Advantech.Adam.AdamCom)">
            <summary>
            The DigitalInput constructor.
            </summary>
            <param name="i_com">The AdamCom object</param>
        </member>
        <member name="M:Advantech.Adam.DigitalInput.#ctor(Advantech.Adam.AdamSocket)">
            <summary>
            The DigitalInput constructor.
            </summary>
            <param name="i_socket">The AdamSocket object</param>
        </member>
        <member name="M:Advantech.Adam.DigitalInput.GetChannelTotal(Advantech.Adam.Adam4000Type)">
            <summary>
            Support module: ADAM-4000.
            Get DI channel total number.
            </summary>
            <param name="adam4000Type">The Adam4000Type.</param>
            <returns>The DI total channel number.</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalInput.GetChannelTotal(Advantech.Adam.Adam5000Type)">
            <summary>
            Support module: ADAM-5000, ADAM-5000/TCP.
            Get DI channel total number.
            </summary>
            <param name="adam5000Type">The Adam5000Type.</param>
            <returns>The DI total channel number.</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalInput.GetChannelTotal(Advantech.Adam.Adam6000Type)">
            <summary>
            Support module: ADAM-6000.
            Get DI channel total number.
            </summary>
            <param name="adam6000Type">The Adam6000Type.</param>
            <returns>The DI total channel number.</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalInput.GetChannelStart(Advantech.Adam.Adam6000Type)">
            <summary>
            Support module: ADAM-6000.
            Get the DI channel start index from IO config array.
            </summary>
            <param name="adam6000Type">The adam6000Type.</param>
            <returns>The DI channel start index.</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalInput.ParseIOConfig(System.Byte,System.Byte@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Support module: ADAM-6000.
            Parse the DI configuration byte.
            </summary>
            <param name="i_byConfig">The configuration byte.</param>
            <param name="o_byMode">The DI mode.</param>
            <param name="o_bRecordLastCount">The record last count status.</param>
            <param name="o_bDigitalFilter">The digital filter enable status.</param>
            <param name="o_bInvert">The invert enable status.</param>
        </member>
        <member name="M:Advantech.Adam.DigitalInput.FormIOConfig(System.Byte,System.Boolean,System.Boolean,System.Boolean,System.Byte@)">
            <summary>
            Support module: ADAM-6000.
            Form the DI configuration byte.
            </summary>
            <param name="i_byMode">The DI mode.</param>
            <param name="i_bRecordLastCount">The record last count status.</param>
            <param name="i_bDigitalFilter">The digital filter enable status.</param>
            <param name="i_bInvert">The invert enable status.</param>
            <param name="o_byConfig">The configuration byte.</param>
        </member>
        <member name="M:Advantech.Adam.DigitalInput.GetCounterScaledValue(System.Int32,System.Int32)">
            <summary>
            Support module: ADAM-6000.
            Get the counter scaled value
            </summary>
            <param name="i_iHigh">The value that is read by Modbus.</param>
            <param name="i_iLow">The value that is read by Modbus.</param>
            <returns>Return scaled value if success, otherwise, return 0.0</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalInput.GetFrequencyScaledValue(System.Int32,System.Int32)">
            <summary>
            Support module: ADAM-6000.
            Get the frequency scaled value
            </summary>
            <param name="i_iHigh">The value that is read by Modbus.</param>
            <param name="i_iLow">The value that is read by Modbus.</param>
            <returns>Return scaled value if success, otherwise, return 0.0</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalInput.GetValue(System.Boolean@)">
            <summary>
            Support module: ADAM-4011, ADAM-4011D, ADAM-4012.
            Get DI status that is used for the event counter.
            </summary>
            <param name="o_bDI">The DI status.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalInput.GetValues(System.Boolean[]@,System.Boolean[]@)">
            <summary>
            Support module: ADAM-4022T.
            Get DI/DO values. 
            </summary>
            <param name="o_bDI">Array of DI values.</param>
            <param name="o_bDO">Array of DO values.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalInput.GetValues(System.Boolean[]@)">
            <summary>
            Support module: ADAM-4024.
            Get DI values. 
            </summary>
            <param name="o_bDI">Array of DI values.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalInput.GetValues(System.Int32,System.Int32,System.Boolean[]@,System.Boolean[]@)">
            <summary>
            Support module: ADAM-4000 pure DIO module.
            Get DI/DO values. 
            </summary>
            <param name="i_iDITotal">The total of the DI channel on the module.</param>
            <param name="i_iDOTotal">The total of the DO channel on the module.</param>
            <param name="o_bDI">Array of DI values. If the DI total is zero, this value will be null.</param>
            <param name="o_bDO">Array of DO values. If the DO total is zero, this value will be null.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalInput.GetInvertMask(System.Boolean[]@)">
            <summary>
            Support module: ADAM-4051.
            Get invert enabled mask
            </summary>
            <param name="o_bEnabled">The invert mask. The channel is invert enabled if element is true. Otherwise, the invert is disabled.
            This array is fix to 16 elements, if the channel total of the module is less 16, the rest of the elements will be set to false.</param>
            <returns>True if secceed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalInput.SetInvertMask(System.Boolean[])">
            <summary>
            Support module: ADAM-4051.
            Set invert enabled mask
            </summary>
            <param name="i_bEnabled">The invert mask. Set an element to true to enabled the invert. Otherwise, set to false.</param>
            <returns>True if secceed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalInput.GetValues(System.Int32,System.Int32,System.Boolean[]@)">
            <summary>
            Support module: ADAM-5000, ADAM-5000TCP.
            Get DI/DO values. If the module has both DI and DO, you must set the i_iChannelTotal to the DI total
            plus the DO total. The o_bValues will return DI values and then the DO values. 
            </summary>
            <param name="i_iSlot">The slot index, base 0.</param>
            <param name="i_iChannelTotal">The total of the channel on the module.</param>
            <param name="o_bValues">Array of DI/DO values.</param>
            <returns>True if secceed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalInput.GetUniversalStatus(System.Int32,System.Boolean[]@)">
            <summary>
            Support module: ADAM-5000, ADAM-5000TCP.
            Get universal status
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="o_bIsDI">The universal status. The channel is DI if element is true. Otherwise, channel is DO</param>
            <returns>True if secceed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalInput.GetInvertMask(System.Int32,System.Boolean[]@)">
            <summary>
            Support module: ADAM-5000/TCP.
            Get invert enabled mask
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="o_bEnabled">The invert mask. The channel is invert enabled if element is true. Otherwise, the invert is disabled.
            This array is fix to 16 elements, if the channel total of the module is less 16, the rest of the elements will be set to false.</param>
            <returns>True if secceed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalInput.SetInvertMask(System.Int32,System.Boolean[])">
            <summary>
            Support module: ADAM-5000/TCP.
            Set invert enabled mask
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="i_bEnabled">The invert mask. Set an element to true to enabled the invert. Otherwise, set to false.</param>
            <returns>True if secceed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalInput.GetIOConfig(System.Byte[]@)">
            <summary>
            Support module: ADAM-6050, ADAM-6051, ADAM-6052, ADAM-6055, ADAM-6060, ADAM-6066.
            Get DIO configuration.
            </summary>
            <param name="o_byConfig">The configuration for all DIO channel.</param>
            <returns>True if secceed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalInput.SetIOConfig(System.Byte[])">
            <summary>
            Support module: ADAM-6050, ADAM-6051, ADAM-6052, ADAM-6055, ADAM-6060, ADAM-6066.
            Set DIO configuration.
            </summary>
            <param name="i_byConfig">The configuration for all DIO channel.</param>
            <returns>True if secceed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalInput.GetDigitalFilterMiniSignalWidth(System.Int64[]@,System.Int64[]@)">
            <summary>
            Support module: ADAM-6050, ADAM-6051, ADAM-6052, ADAM-6055, ADAM-6060, ADAM-6066.
            Get digital filter minimum signal width.
            </summary>
            <param name="o_lHigh">The minimum high signal width.</param>
            <param name="o_lLow">The minimum low signal width.</param>
            <returns>True if secceed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalInput.SetDigitalFilterMiniSignalWidth(System.Int64[],System.Int64[])">
            <summary>
            Support module: ADAM-6050, ADAM-6051, ADAM-6052, ADAM-6055, ADAM-6060, ADAM-6066.
            Set digital filter minimum signal width.
            </summary>
            <param name="i_lHigh">The minimum high signal width.</param>
            <param name="i_lLow">The minimum low signal width.</param>
            <returns>True if secceed, otherwise false.</returns>
        </member>
        <member name="T:Advantech.Adam.Adam_DOMode">
            <summary>
            DI mode
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_DOMode.Do">
            <summary>
            Normal DO mode
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_DOMode.PulseOutput">
            <summary>
            Pulse output mode
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_DOMode.LowToHighDelay">
            <summary>
            Low to high delay mode
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_DOMode.HighToLowDelay">
            <summary>
            High to low delay mode
            </summary>
        </member>
        <member name="F:Advantech.Adam.Adam_DOMode.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:Advantech.Adam.DigitalOutput">
            <summary>
            DigitalOutput class for ADAM series.
            </summary>
        </member>
        <member name="M:Advantech.Adam.DigitalOutput.#ctor(Advantech.Adam.AdamCom)">
            <summary>
            The DigitalOutput constructor.
            </summary>
            <param name="i_com">The AdamCom object</param>
        </member>
        <member name="M:Advantech.Adam.DigitalOutput.#ctor(Advantech.Adam.AdamSocket)">
            <summary>
            The DigitalOutput constructor.
            </summary>
            <param name="i_socket">The AdamSocket object</param>
        </member>
        <member name="M:Advantech.Adam.DigitalOutput.GetChannelTotal(Advantech.Adam.Adam4000Type)">
            <summary>
            Support module: ADAM-4000.
            Get DO channel total number.
            </summary>
            <param name="adam4000Type">The Adam4000Type.</param>
            <returns>The DO total channel number.</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalOutput.GetChannelTotal(Advantech.Adam.Adam5000Type)">
            <summary>
            Support module: ADAM-5000, ADAM-5000/TCP.
            Get DO channel total number.
            </summary>
            <param name="adam5000Type">The Adam5000Type.</param>
            <returns>The DO total channel number.</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalOutput.GetChannelTotal(Advantech.Adam.Adam6000Type)">
            <summary>
            Support module: ADAM-6000.
            Get DO channel total number.
            </summary>
            <param name="adam6000Type">The Adam6000Type.</param>
            <returns>The DO total channel number.</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalOutput.GetChannelStart(Advantech.Adam.Adam6000Type)">
            <summary>
            Support module: ADAM-6000.
            Get the DO channel start index from IO config array.
            </summary>
            <param name="adam6000Type">The adam6000Type.</param>
            <returns>The DO channel start index.</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalOutput.ParseIOConfig(System.Byte,System.Byte@)">
            <summary>
            Support module: ADAM-6000.
            Parse the DO configuration byte.
            </summary>
            <param name="i_byConfig">The configuration byte.</param>
            <param name="o_byMode">The DO mode.</param>
        </member>
        <member name="M:Advantech.Adam.DigitalOutput.FormIOConfig(System.Byte,System.Byte@)">
            <summary>
            Support module: ADAM-6000.
            Form the DO configuration byte.
            </summary>
            <param name="i_byMode">The DO mode.</param>
            <param name="o_byConfig">The configuration byte.</param>
        </member>
        <member name="M:Advantech.Adam.DigitalOutput.GetValues(System.Boolean[]@,System.Boolean[]@)">
            <summary>
            Support module: ADAM-4022T.
            Get DI/DO values. 
            </summary>
            <param name="o_bDI">Array of DI values.</param>
            <param name="o_bDO">Array of DO values.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalOutput.GetValues(System.Int32,System.Int32,System.Boolean[]@,System.Boolean[]@)">
            <summary>
            Support module: ADAM-4000 pure DIO module.
            Get DI/DO values. 
            </summary>
            <param name="i_iDITotal">The total of the DI channel on the module.</param>
            <param name="i_iDOTotal">The total of the DO channel on the module.</param>
            <param name="o_bDI">Array of DI values. If the DI total is zero, this value will be null.</param>
            <param name="o_bDO">Array of DO values. If the DO total is zero, this value will be null.</param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.DigitalOutput.SetValue(System.Int32,System.Boolean)">
            <summary>
            Support module: ADAM-4000. (But not for ADAM-4056S, ADAM-4056SO)
            Set DO value to a single channel.
            </summary>
            <param name="i_iChannel">The channel index, base 0.</param>
            <param name="i_bValue">The DO value to set.</param>
            <returns>True if secceed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalOutput.SetSValue(System.Int32,System.Boolean)">
            <summary>
            Support module: For ADAM-4056S, ADAM-4056SO only.
            Set DO value to a single channel.
            </summary>
            <param name="i_iChannel">The channel index, base 0.</param>
            <param name="i_bValue">The DO value to set.</param>
            <returns>True if secceed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalOutput.SetValues(System.Boolean[])">
            <summary>
            Support module: ADAM-4000.
            Set DO value to all channels.
            </summary>
            <param name="i_bValues">The DO values to set. The length of the array must match the total of the channel on the module.</param>
            <returns>True if secceed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalOutput.GetWDTInfo(System.Single@,System.Boolean[]@)">
            <summary>
            Support module: ADAM-4000.
            Get WDT information.
            </summary>
            <param name="o_fTimeout">The timeout value. If no communication within the timeout, those channels
            that are set with WDT enabled will set to ON.</param>
            <param name="o_bEnabled">The channel WDT mask. The channel is WDT enabled if element is true. Otherwise, the WDT is disabled.
            This array is fixed to 16 elements, if the channel total of the module is less 16, the rest of the elements will be set to false.</param>
            <returns>True if secceed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalOutput.SetWDTInfo(System.Single,System.Boolean[])">
            <summary>
            Support module: ADAM-4000.
            Set WDT information.
            </summary>
            <param name="i_fTimeout">The timeout value. If no communication within the timeout, those channels
            that are set with WDT enabled will set to ON.</param>
            <param name="i_bEnabled">The WDT mask. Set an element to true to enabled the WDT. Otherwise, set to false.
            The total of the array must be the same as the total of DO channel on the module.</param>
            <returns>True if secceed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalOutput.GetValues(System.Int32,System.Int32,System.Boolean[]@)">
            <summary>
            Support module: ADAM-5000, ADAM-5000TCP.
            Get DI/DO values. If the module has both DI and DO, you must set the i_iChannelTotal to the DI total
            plus the DO total. The o_bValues will return DI values and then the DO values. 
            </summary>
            <param name="i_iSlot">The slot index, base 0.</param>
            <param name="i_iChannelTotal">The total of the channel on the module.</param>
            <param name="o_bValues">Array of DI/DO values.</param>
            <returns>True if secceed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalOutput.SetValue(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Support module: ADAM-5000, ADAM-5000TCP.
            Set DO value to a single channel.
            </summary>
            <param name="i_iSlot">The slot index, base 0.</param>
            <param name="i_iChannel">The channel index, base 0.</param>
            <param name="i_bValue">The DO value to set.</param>
            <returns>True if secceed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalOutput.SetValues(System.Int32,System.Boolean[])">
            <summary>
            Support module: ADAM-5000, ADAM-5000TCP.
            Set DO value to all channels.
            </summary>
            <param name="i_iSlot">The slot index, base 0.</param>
            <param name="i_bValues">The DO values to set. The length of the array must match the total of the channel on the module.</param>
            <returns>True if secceed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalOutput.GetUniversalStatus(System.Int32,System.Boolean[]@)">
            <summary>
            Support module: ADAM-5000, ADAM-5000TCP.
            Get universal status
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="o_bIsDI">The universal status. The channel is DI if element is true. Otherwise, channel is DO</param>
            <returns>True if secceed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalOutput.GetAlarmMappingMask(System.Int32,System.Int32,System.Boolean[]@)">
            <summary>
            Support module: ADAM-5000, ADAM-5000TCP.
            Get the alarm mapping mask.
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="i_iChannelTotal">The total of the channel on the module.</param>
            <param name="o_bEnabled">The mappng mask. The channel is mapped by alarm if element is true. Otherwise, channel is not mapped.</param>
            <returns>True if secceed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalOutput.GetWDTMask(System.Int32,System.Boolean[]@)">
            <summary>
            Support module: ADAM-5000, ADAM-5000TCP.
            Get WDT enabled mask
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="o_bEnabled">The WDT mask. The channel is WDT enabled if element is true. Otherwise, the WDT is disabled.
            This array is fixed to 16 elements, if the channel total of the module is less 16, the rest of the elements will be set to false.</param>
            <returns>True if secceed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalOutput.GetWDTMask(System.Boolean@,System.Boolean[]@)">
            <summary>
            Support module: ADAM-6000.
            Get WDT enabled mask
            </summary>
            <param name="o_bEnabled">The WDT enabled status.</param>
            <param name="o_bMask">The WDT mask. The channel is WDT enabled if element is true. Otherwise, the WDT is disabled.
            This array is fixed to 8 elements, if the channel total of the module is less 8, the rest of the elements will be set to false.</param>
            <returns>True if secceed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalOutput.SetWDTMask(System.Int32,System.Boolean[])">
            <summary>
            Support module: ADAM-5000, ADAM-5000TCP.
            Set WDT enabled mask
            </summary>
            <param name="i_iSlot">Slot index. The value is between 0~7</param>
            <param name="i_bEnabled">The WDT mask. Set an element to true to enabled the WDT. Otherwise, set to false.</param>
            <returns>True if secceed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalOutput.SetWDTMask(System.Boolean,System.Boolean[])">
            <summary>
            Support module: ADAM-6000.
            Set WDT enabled mask
            </summary>
            <param name="i_bEnabled">The WDT enabled status.</param>
            <param name="i_bMask">The WDT mask. Set an element to true to enabled the WDT. Otherwise, set to false.</param>
            <returns>True if secceed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalOutput.GetIOConfig(System.Byte[]@)">
            <summary>
            Support module: ADAM-6000.
            Get DIO configuration.
            </summary>
            <param name="o_byConfig">The configuration for all DIO channel.</param>
            <returns>True if secceed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalOutput.SetIOConfig(System.Byte[])">
            <summary>
            Support module: ADAM-6000.
            Set DIO configuration.
            </summary>
            <param name="i_byConfig">The configuration for all DIO channel.</param>
            <returns>True if secceed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalOutput.GetPulseOutputWidthAndDelayTime(System.Int64[]@,System.Int64[]@,System.Int64[]@,System.Int64[]@)">
            <summary>
            Support module: ADAM-6000.
            Get pulse output width and delay time.
            </summary>
            <param name="o_lPulseHighWidth">The pulse high signal width.</param>
            <param name="o_lPulseLowWidth">The pulse low signal width.</param>
            <param name="o_lHighToLowDelay">The high to low delat time.</param>
            <param name="o_lLowToHighDelay">The low to high delay time.</param>
            <returns>True if secceed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.DigitalOutput.SetPulseOutputWidthAndDelayTime(System.Int64[],System.Int64[],System.Int64[],System.Int64[])">
            <summary>
            Support module: ADAM-6000.
            Set pulse output width and delay time.
            </summary>
            <param name="i_lPulseHighWidth">The pulse high signal width.</param>
            <param name="i_lPulseLowWidth">The pulse low signal width.</param>
            <param name="i_lHighToLowDelay">The high to low delat time.</param>
            <param name="i_lLowToHighDelay">The low to high delay time.</param>
            <returns>True if secceed, otherwise false.</returns>
        </member>
        <member name="T:Advantech.Adam.Modbus">
            <summary>
            MODBUS class library.
            </summary>
        </member>
        <member name="F:Advantech.Adam.Modbus.m_com">
            <summary>
            AdamCom reference
            </summary>
        </member>
        <member name="F:Advantech.Adam.Modbus.m_socket">
            <summary>
            AdamSocket reference
            </summary>
        </member>
        <member name="M:Advantech.Adam.Modbus.#ctor(Advantech.Adam.AdamCom)">
            <summary>
            The Modbus-RTU constructor
            </summary>
            <param name="i_com">The AdamCom object.</param>
        </member>
        <member name="M:Advantech.Adam.Modbus.#ctor(Advantech.Adam.AdamSocket)">
            <summary>
            The Modbus-TCP constructor
            </summary>
            <param name="i_socket"> The AdamSocket object</param>
        </member>
        <member name="M:Advantech.Adam.Modbus.ReadCoilStatus(System.Int32,System.Int32,System.Byte[]@)">
            <summary>
            Modbus function(01) Read coil status
            Reads the ON/OFF status of discrete outputs (0X references, coils) in the slave.
            </summary>
            <param name="i_iStartIndex">The starting coil addres (The base is 1).</param>
            <param name="i_iTotalPoint">The number of coil for reading.</param>
            <param name="o_byteCoil">The raw byte data of coil received.</param>
            <returns>True, if successed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Modbus.ReadCoilStatus(System.Int32,System.Int32,System.Boolean[]@)">
            <summary>
            Modbus function(01) Read coil status
            Reads the ON/OFF status of discrete outputs (0X references, coils) in the slave.
            </summary>
            <param name="i_iStartIndex">The starting coil addres (The base is 1).</param>
            <param name="i_iTotalPoint">The number of coil for reading.</param>
            <param name="o_bCoil">The parsed boolean of coil received.</param>
            <returns>True, if successed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Modbus.ReadInputStatus(System.Int32,System.Int32,System.Byte[]@)">
            <summary>
            Modbus function(02) Read input status
            Reads the ON/OFF status of discrete inputs (1X references) in the slave.
            </summary>
            <param name="i_iStartIndex">The starting coil addres (The base is 1).</param>
            <param name="i_iTotalPoint">The number of coil for reading.</param>
            <param name="o_byteCoil">The raw byte data of coil received.</param>
            <returns>True, if successed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Modbus.ReadInputStatus(System.Int32,System.Int32,System.Boolean[]@)">
            <summary>
            Modbus function(02) Read input status
            Reads the ON/OFF status of discrete inputs (1X references) in the slave.
            </summary>
            <param name="i_iStartIndex">The starting coil addres (The base is 1).</param>
            <param name="i_iTotalPoint">The number of coil for reading.</param>
            <param name="o_bCoil">The parsed boolean of coil received.</param>
            <returns>True, if successed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Modbus.ReadHoldingRegs(System.Int32,System.Int32,System.Byte[]@)">
            <summary>
            Modbus function(03) Read holding registers
            Reads the binary contents of holding registers (4X references) in the slave.
            </summary>
            <param name="i_iStartIndex">The starting register addres (The base is 1).</param>
            <param name="i_iTotalPoint">The number of register for reading.</param>
            <param name="o_byteData">The raw byte data of register received.</param>
            <returns>True, if successed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Modbus.ReadHoldingRegs(System.Int32,System.Int32,System.Int32[]@)">
            <summary>
            Modbus function(03) Read holding registers
            Reads the integer contents of holding registers (4X references) in the slave.
            </summary>
            <param name="i_iStartIndex">The starting register addres (The base is 1).</param>
            <param name="i_iTotalPoint">The number of register for reading.</param>
            <param name="o_iData">The data of register received.</param>
            <returns>True, if successed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Modbus.ReadInputRegs(System.Int32,System.Int32,System.Byte[]@)">
            <summary>
            Modbus function(04) Read input registers
            Reads the binary contents of input registers (3X references) in the slave.
            </summary>
            <param name="i_iStartIndex">The starting register addres (The base is 1).</param>
            <param name="i_iTotalPoint">The number of register for reading.</param>
            <param name="o_byteData">The raw byte data of register received.</param>
            <returns>True, if successed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Modbus.ReadInputRegs(System.Int32,System.Int32,System.Int32[]@)">
            <summary>
            Modbus function(04) Read input registers
            Reads the integer contents of input registers (3X references) in the slave.
            </summary>
            <param name="i_iStartIndex">The starting register addres (The base is 1).</param>
            <param name="i_iTotalPoint">The number of register for reading.</param>
            <param name="o_iData">The data of register received.</param>
            <returns>True, if successed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Modbus.ForceSingleCoil(System.Int32,System.Int32)">
            <summary>
            Modbus function(05) Force single coil
            Forces a single coil (0X reference) to either ON or OFF.
            </summary>
            <param name="i_iCoilIndex">The coil address(The base is 1).</param>
            <param name="i_iData">The coil data, 0 is OFF, other is ON</param>
            <returns>True, if successed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Modbus.ForceSingleCoil(System.Int32,System.Boolean)">
            <summary>
            Modbus function(05) Force single coil
            Forces a single coil (0X reference) to either ON or OFF.
            </summary>
            <param name="i_iCoilIndex">The coil address(The base is 1).</param>
            <param name="i_bData">The coil data, false is OFF, true is ON</param>
            <returns>True, if successed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Modbus.PresetSingleReg(System.Int32,System.Int32)">
            <summary>
            Modbus function(06) Preset single register
            Presets a value into a single holding register (4X reference).
            </summary>
            <param name="i_iRegIndex">The register address(The base is 1).</param>
            <param name="i_iData">The register data. The value is from 0~65535.</param>
            <returns>True, if successed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Modbus.ForceMultiCoils(System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Modbus function(0F) Force multiple coils
            Forces each coil (0X reference) in a sequence of coils to either ON or OFF.
            </summary>
            <param name="i_iStartCoil">The starting coil addres (The base is 1).</param>
            <param name="i_iTotalPoint">The total of coil for setting.</param>
            <param name="i_iTotalByte">The total of byte for setting.</param>
            <param name="i_byData">The raw byte data for setting coils.</param>
            <returns>True, if successed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Modbus.ForceMultiCoils(System.Int32,System.Boolean[])">
            <summary>
            Modbus function(0F) Force multi coils
            Forces each coil (0X reference) in a sequence of coils to either ON or OFF.
            </summary>
            <param name="i_iStartCoil">The starting coil addres (The base is 1).</param>
            <param name="i_bData">The boolean data for setting coils.</param>
            <returns>True, if successed, otherwise false.</returns>
        </member>
        <member name="M:Advantech.Adam.Modbus.PresetMultiRegs(System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Modbus function(10) Preset Multi-regs
            Presets values into a sequence of holding registers (4X references).
            </summary>
            <param name="i_iStartReg">The starting register addres (The base is 1).</param>
            <param name="i_iTotalReg">The total of register for setting.</param>
            <param name="i_iTotalByte">The total of byte for setting.</param>
            <param name="i_byData">The byte data for setting registers.</param>
            <returns></returns>
        </member>
        <member name="M:Advantech.Adam.Modbus.PresetMultiRegs(System.Int32,System.Int32[])">
            <summary>
            Modbus function(10) Preset Multi-regs
            Presets values into a sequence of holding registers (4X references).
            </summary>
            <param name="i_iStartReg">The starting register addres (The base is 1).</param>
            <param name="i_iData">The array of data for setting registers. The value is from 0~65535.</param>
            <returns></returns>
        </member>
        <member name="T:Advantech.Adam.PID_Loop">
            <summary>
            The PID loop.
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Loop.Loop0">
            <summary>
            PID Loop-0
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Loop.Loop1">
            <summary>
            PID Loop-1
            </summary>
        </member>
        <member name="T:Advantech.Adam.PID_Addr">
            <summary>
            The PID value address
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.ControlMode">
            <summary>
            PID control mode. (R/W, int)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.PidMode">
            <summary>
            PID calculation mode. (R/W, int)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.PvMode">
            <summary>
            PV mode (which PV to be used). (R/W, int)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Pv1BareData">
            <summary>
            first PV raw data. (R, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Pv2BareData">
            <summary>
            second PV bare data. (R, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.MvBareData">
            <summary>
            MV bare data. (R, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.DiStatus">
            <summary>
            DI current status. (R, int)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.DoStatus">
            <summary>
            DO current status. (R, int)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Sv1">
            <summary>
            SV for first PV. (R/W, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Sv2">
            <summary>
            SV for second PV. (R/W, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Pv1RangeHigh">
            <summary>
            The scaled high bound of the first PV. (R/W, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Pv1RangeLow">
            <summary>
            The scaled low bound of the first PV. (R/W, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Pv2RangeHigh">
            <summary>
            The scaled high bound of the Second PV. (R/W, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Pv2RangeLow">
            <summary>
            The scaled low bound of the Second PV. (R/W, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.MvRangeHigh">
            <summary>
            The scaled high bound of the MV. (R/W, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.MvRangeLow">
            <summary>
            The scaled low bound of the MV. (R/W, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Pv1EngData">
            <summary>
            The engineering data for the first PV. (R, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Pv2EngData">
            <summary>
            The engineering data for the second PV. (R, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.MvEngData">
            <summary>
            The engineering data for the MV. (R/W, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.PvEngData">
            <summary>
            The engineering data of the current using PV. (R, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.SvEngData">
            <summary>
            The engineering data of the current using MV. (R, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Pv1Filter">
            <summary>
            The filter value for the first PV. (R/W, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Pv2Filter">
            <summary>
            The filter value for the second PV. (R/W, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Pv1RangeCode">
            <summary>
            The range code for the first PV. (R, int)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Pv2RangeCode">
            <summary>
            The range code for the second PV. (R, int)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.MvRangeCode">
            <summary>
            The range code for the MV. (R, int)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Pv1KP">
            <summary>
            The KP value for the first PV. (R/W, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Pv1KI">
            <summary>
            The KI value for the first PV. (R/W, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Pv1KD">
            <summary>
            The KD value for the first PV. (R/W, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Pv2KP">
            <summary>
            The KP value for the second PV. (R/W, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Pv2KI">
            <summary>
            The KI value for the second PV. (R/W, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Pv2KD">
            <summary>
            The KD value for the second PV. (R/W, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.KP">
            <summary>
            The KP value for current using PV. (R, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.KI">
            <summary>
            The KI value for current using PV. (R, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.KD">
            <summary>
            The KD value for current using PV. (R, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Pv1CountdownInterval">
            <summary>
            The calculation count down interval for the first PV. (R/W, int)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Pv2CountdownInterval">
            <summary>
            The calculation count down interval for the second PV. (R/W, int)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.CountdownInterval">
            <summary>
            The current using calculation count down interval. (R, int)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.CurrentCountdown">
            <summary>
            The current using calculation count down value. (R, int)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.LastControlMode">
            <summary>
            The last control mode. (R, int)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.CurrentNsec">
            <summary>
            The current NSEC value. (R, int)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.LastNsec">
            <summary>
            The last NSEC value. (R, int)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.PowerupMode">
            <summary>
            The power up mode.  (R/W, int)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.MvInitValue">
            <summary>
            The MV value when power up.  (R/W, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.LastDiState">
            <summary>
            The last DI status. (R, int)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.LastDoState">
            <summary>
            The last DO value. (R, int)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Pv1AlarmHH">
            <summary>
            The high-high alarm for the first PV. (R/W, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Pv1AlarmH">
            <summary>
            The high alarm for the first PV. (R/W, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Pv1AlarmLL">
            <summary>
            The low-low alarm for the first PV. (R/W, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Pv1AlarmL">
            <summary>
            The low alarm for the first PV. (R/W, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Pv1AlarmDeadband">
            <summary>
            The alarm deadband for the first PV. (R/W, float) 
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Pv1AlarmStatus">
            <summary>
            The alarm status for the first PV. (R, int)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Pv2AlarmHH">
            <summary>
            The high-high alarm for the Second PV. (R/W, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Pv2AlarmH">
            <summary>
            The high alarm for the Second PV. (R/W, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Pv2AlarmLL">
            <summary>
            The low-low alarm for the Second PV. (R/W, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Pv2AlarmL">
            <summary>
            The low alarm for the Second PV. (R/W, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Pv2AlarmDeadband">
            <summary>
            The alarm deadband for the second PV. (R/W, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Pv2AlarmStatus">
            <summary>
            The alarm status for the second PV. (R, int)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.MvHighLimit">
            <summary>
            The high limit for MV. (R/W, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.MvLowLimit">
            <summary>
            The low limit for MV. (R/W, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.MvAlarmStatus">
            <summary>
            The MV alarm status, which triggered when MV exceed high or low limit. (R, int)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.MvEmergencyValue">
            <summary>
            Emergency stop MV value. (R/W, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Pv1OpenWireFlag">
            <summary>
            The open-wire flag for the first PV. (R, int)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Pv2OpenWireFlag">
            <summary>
            The open-wire flag for the second PV. (R, int)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.PidDirectReverse">
            <summary>
            The PID direct/reverse mode. (R/W, int)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Sv1HighLimit">
            <summary>
            The high limit for the first SV. (R/W, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Sv1LowLimit">
            <summary>
            The low limit for the first SV. (R/W, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Sv2HighLimit">
            <summary>
            The high limit for the second SV. (R/W, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.Sv2LowLimit">
            <summary>
            The low limit for the second SV. (R/W, float)
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID_Addr.AlarmMask">
            <summary>
            The DO alarm output mask. (R/W, int)
            </summary>
        </member>
        <member name="T:Advantech.Adam.PID">
            <summary>
            Summary description for PID.
            </summary>
        </member>
        <member name="F:Advantech.Adam.PID.m_com">
            <summary>
            AdamSocket reference
            </summary>
        </member>
        <member name="M:Advantech.Adam.PID.#ctor(Advantech.Adam.AdamCom)">
            <summary>
            The PID constructor.
            </summary>
            <param name="i_com">The AdamCom object</param>
        </member>
        <member name="M:Advantech.Adam.PID.#ctor(Advantech.Adam.AdamSocket)">
            <summary>
            The PID constructor.
            </summary>
            <param name="i_socket">The AdamSocket object</param>
        </member>
        <member name="M:Advantech.Adam.PID.ModbusRefreshBuffer(Advantech.Adam.PID_Loop)">
            <summary>
            Support module: ADAM-4022T, ADAM-6022.
            Force to read the PID values of a loop into the object buffer by MODBUS protocol.
            </summary>
            <param name="i_loop">The PID loop index.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.PID.ModbusBufferToModule(Advantech.Adam.PID_Loop)">
            <summary>
            Support module: ADAM-4022T, ADAM-6022.
            Force to update the PID values of a loop from the buffer to the module by MODBUS protocol.
            </summary>
            <param name="i_loop">The PID loop index.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.PID.AsciiRefreshBuffer(Advantech.Adam.PID_Loop)">
            <summary>
            Support module: ADAM-4022T, ADAM-6022.
            Force to read the PID values of a loop into the object buffer by Advantech ASCII protocol.
            </summary>
            <param name="i_loop">The PID loop index.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.PID.AsciiBufferToModule(Advantech.Adam.PID_Loop)">
            <summary>
            Support module: ADAM-4022T, ADAM-6022.
            Force to update the PID values of a loop from the buffer to the module by Advantech ASCII protocol.
            </summary>
            <param name="i_loop">The PID loop index.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.PID.GetBufferInt(Advantech.Adam.PID_Loop,Advantech.Adam.PID_Addr)">
            <summary>
            Support module: ADAM-4022T, ADAM-6022.
            Get PID integer value from buffer.
            </summary>
            <param name="i_loop">The PID loop index.</param>
            <param name="i_addr">The PID value address.</param>
            <returns>Return The PID integer value.</returns>
        </member>
        <member name="M:Advantech.Adam.PID.SetBufferInt(Advantech.Adam.PID_Loop,Advantech.Adam.PID_Addr,System.Int32)">
            <summary>
            Support module: ADAM-4022T, ADAM-6022.
            Set PID integer value to buffer.
            </summary>
            <param name="i_loop">The PID loop index.</param>
            <param name="i_addr">The PID value address.</param>
            <param name="i_iValue">The PID integer value.</param>
            <returns>Return The PID integer value.</returns>
        </member>
        <member name="M:Advantech.Adam.PID.GetBufferFloat(Advantech.Adam.PID_Loop,Advantech.Adam.PID_Addr)">
            <summary>
            Support module: ADAM-4022T, ADAM-6022.
            Get PID float value from buffer.
            </summary>
            <param name="i_loop">The PID loop index.</param>
            <param name="i_addr">The PID value address.</param>
            <returns>Return The PID float value.</returns>
        </member>
        <member name="M:Advantech.Adam.PID.SetBufferFloat(Advantech.Adam.PID_Loop,Advantech.Adam.PID_Addr,System.Single)">
            <summary>
            Support module: ADAM-4022T, ADAM-6022.
            Set PID float value to buffer.
            </summary>
            <param name="i_loop">The PID loop index.</param>
            <param name="i_addr">The PID value address.</param>
            <param name="i_fValue">The PID float value.</param>
            <returns>Return The PID integer value.</returns>
        </member>
        <member name="M:Advantech.Adam.PID.ModbusSetValue(Advantech.Adam.PID_Loop,Advantech.Adam.PID_Addr,System.Int32)">
            <summary>
            Support module: ADAM-4022T, ADAM-6022.
            Set the PID integer value to the module by MODBUS protocol.
            </summary>
            <param name="i_loop">The PID loop index.</param>
            <param name="i_addr">The PID value address.</param>
            <param name="i_iValue">The PID integer value.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.PID.ModbusGetValue(Advantech.Adam.PID_Loop,Advantech.Adam.PID_Addr,System.Int32@)">
            <summary>
            Support module: ADAM-4022T, ADAM-6022.
            Get the PID integer value from the module by MODBUS protocol.
            </summary>
            <param name="i_loop">The PID loop index.</param>
            <param name="i_addr">The PID value address.</param>
            <param name="o_iValue">The PID integer value.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.PID.ModbusSetValue(Advantech.Adam.PID_Loop,Advantech.Adam.PID_Addr,System.Single)">
            <summary>
            Support module: ADAM-4022T, ADAM-6022.
            Set the PID float value to the module by MODBUS protocol.
            </summary>
            <param name="i_loop">The PID loop index.</param>
            <param name="i_addr">The PID value address.</param>
            <param name="i_fValue">The PID float value.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.PID.ModbusGetValue(Advantech.Adam.PID_Loop,Advantech.Adam.PID_Addr,System.Single@)">
            <summary>
            Support module: ADAM-4022T, ADAM-6022.
            Get the PID float value from the module by MODBUS protocol.
            </summary>
            <param name="i_loop">The PID loop index.</param>
            <param name="i_addr">The PID value address.</param>
            <param name="o_fValue">The PID float value.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.PID.AsciiSetValue(Advantech.Adam.PID_Loop,Advantech.Adam.PID_Addr,System.Int32)">
            <summary>
            Support module: ADAM-4022T, ADAM-6022.
            Set the PID integer value to the module by Advantech ASCII protocol.
            </summary>
            <param name="i_loop">The PID loop index.</param>
            <param name="i_addr">The PID value address.</param>
            <param name="i_iValue">The PID integer value.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.PID.AsciiGetValue(Advantech.Adam.PID_Loop,Advantech.Adam.PID_Addr,System.Int32@)">
            <summary>
            Support module: ADAM-4022T, ADAM-6022.
            Get the PID integer value from the module by Advantech ASCII protocol.
            </summary>
            <param name="i_loop">The PID loop index.</param>
            <param name="i_addr">The PID value address.</param>
            <param name="o_iValue">The PID integer value.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.PID.AsciiSetValue(Advantech.Adam.PID_Loop,Advantech.Adam.PID_Addr,System.Single)">
            <summary>
            Support module: ADAM-4022T, ADAM-6022.
            Set the PID float value to the module by Advantech ASCII protocol.
            </summary>
            <param name="i_loop">The PID loop index.</param>
            <param name="i_addr">The PID value address.</param>
            <param name="i_fValue">The PID float value.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
        <member name="M:Advantech.Adam.PID.AsciiGetValue(Advantech.Adam.PID_Loop,Advantech.Adam.PID_Addr,System.Single@)">
            <summary>
            Support module: ADAM-4022T, ADAM-6022.
            Get the PID float value from the module by Advantech ASCII protocol.
            </summary>
            <param name="i_loop">The PID loop index.</param>
            <param name="i_addr">The PID value address.</param>
            <param name="o_fValue">The PID float value.</param>
            <returns>Return true if success, otherwise return false.</returns>
        </member>
    </members>
</doc>
